{#######################################################################################
# All or portions of this file Copyright (c) Amazon.com, Inc. or its affiliates or
# its licensors.
#
# For complete copyright and license terms please see the LICENSE at the root of this
# distribution (the "License"). All use of this software is governed by the License,
# or, if provided, by the license below or the license accompanying this file. Do not
# remove or modify any license notices. This file is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#
#####################################################################################-#}

{% import 'ConfluenceWiki_Utilities.jinja' as Utils -%}

{% macro WriteClass(uuid, class)%}
        {# Header #}
h1. {{ Utils.Sanitize(class.Name) }} {anchor:{{ Utils.ClearBraces(uuid) }}}
{{Utils.Sanitize(class.Description)}}
_Id_: {{ Utils.Sanitize(class.Id) }}
_Uuid_: {{ Utils.Sanitize(uuid) }}

        {# Bases #}
        {% if class.Bases is defined %}
_Bases_:
            {% for base in class.Bases %}
* {{ Utils.Link(SerializeContext, Config, Utils.Sanitize(base.Type), base.Uuid) }}
            {% endfor %}
        {% endif -%}

        {# Generics #}
        {% if class.Generics is defined %}
_Generics_:
            {% for generic in class.Generics %}
* {{ Utils.Link(SerializeContext, Config, Utils.Sanitize(generic.Type), generic.SpecializedUuid) }}
            {% endfor %}
        {% endif %}

        {# Fields #}
        {% if class.Fields is defined %}
||Name||Type||Description||
            {% for field in class.Fields %}
|{{ Utils.Sanitize(field.Name) }}|{{ Utils.Link(SerializeContext, Config, Utils.Sanitize(field.Type), field.Uuid) }}|{{Utils.Sanitize(field.Description)}} |
            {% endfor %}
        {% endif -%}
----
{% endmacro -%}

{expand:Table of contents}
{toc}
{expand}

{info}
This document is automatically generated using the template '{{ self._TemplateReference__context.name }}'
{info}

{% for uuid, class in SerializeContext.items()|sort(attribute='1.Name') %}
    {% if Config.Filter is defined %}
        {% if class.Name.startswith(Config.Filter|lower) or class.Name.startswith(Config.Filter|upper)%}
            {{- WriteClass(uuid, class) }}
        {% endif %}
    {% else %}
        {{- WriteClass(uuid, class) }}
    {% endif %}
{% endfor %}