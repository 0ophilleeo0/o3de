{#
All or portions of this file Copyright (c) Amazon.com, Inc. or its affiliates or
its licensors.

For complete copyright and license terms please see the LICENSE at the root of this
distribution (the "License"). All use of this software is governed by the License,
or, if provided, by the license below or the license accompanying this file. Do not
remove or modify any license notices. This file is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#}
#pragma once

#include <ScriptCanvas/Core/Datum.h>
#include <ScriptCanvas/Core/Node.h>

{% for xml in dataFiles %}
{%     for Class in xml.iter('Class') %}
{%         for Include in Class.iter('Include') %}
#include <{{ Include.attrib['File'] }}>
{%         endfor %}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
////
//// {{ Class.attrib['Name'] }}
////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

// The following will be injected directly into the source header file for which AzCodeGenerator is being run.
// You must #include the generated header into the source header
#define SCRIPTCANVAS_NODE_{{ Class.attrib['Name'] }} \
public: \
    AZ_COMPONENT({{ Class.attrib['Name'] }}, "{{ Class.attrib['Uuid'] }}"{% if Class.attrib['Base'] is defined %}, {{ Class.attrib['Base'] }}{% endif %}); \
    static void Reflect(AZ::ReflectContext* reflection); \
    void ConfigureSlots() override; \
    bool RequiresDynamicSlotOrdering() const override; \
    bool IsDeprecated() const override; \
    using Node::FindDatum; \
{% if Class.attrib['GraphEntryPoint'] is defined %}    bool IsEntryPoint() const override { return true; } \
{% endif %}
public: \
    friend struct ::{{ Class.attrib['Name'] | replace(' ','') }}Property;

// Helpers for easily accessing properties and slots
struct {{ Class.attrib['Name'] | replace(' ','') }}Property
{
{%         for Property in Class.iter('Out') %}
{% if Property.attrib['Description'] is defined %}    // {{ Property.attrib['Description'] }}{% endif %}

    static ScriptCanvas::SlotId Get{{ Property.attrib['Name'] | replace(' ','') }}SlotId(const ScriptCanvas::Node* owner)
    {
        return owner->GetSlotId("{{ Property.attrib['Name'] }}");
    }
    
    static ScriptCanvas::Slot* Get{{ Property.attrib['Name'] | replace(' ','') }}Slot(const ScriptCanvas::Node* owner)
    {
        return owner->GetSlot(Get{{ Property.attrib['Name'] | replace(' ','') }}SlotId(owner));
    }

{%         endfor %}
{%         for Property in Class.iter('OutLatent') %}
{% if Property.attrib['Description'] is defined %}    // {{ Property.attrib['Description'] }}{% endif %}

    static ScriptCanvas::SlotId Get{{ Property.attrib['Name'] | replace(' ','') }}SlotId(const ScriptCanvas::Node* owner)
    {
        return owner->GetSlotId("{{ Property.attrib['Name'] }}");
    }
    
    static ScriptCanvas::Slot* Get{{ Property.attrib['Name'] | replace(' ','') }}Slot(const ScriptCanvas::Node* owner)
    {
        return owner->GetSlot(Get{{ Property.attrib['Name'] | replace(' ','') }}SlotId(owner));
    }

{%         endfor %}
{%         for Property in Class.iter('In') %}
{% if Property.attrib['Description'] is defined %}    // {{ Property.attrib['Description'] }}{% endif %}

    static ScriptCanvas::SlotId Get{{ Property.attrib['Name'] | replace(' ','') }}SlotId(const ScriptCanvas::Node* owner)
    {
        return owner->GetSlotId("{{ Property.attrib['Name'] }}");
    }

    static ScriptCanvas::Slot* Get{{ Property.attrib['Name'] | replace(' ','') }}Slot(const ScriptCanvas::Node* owner)
    {
        return owner->GetSlot(Get{{ Property.attrib['Name'] | replace(' ','') }}SlotId(owner));
    }

{%         endfor %}
{%         for Property in Class.iter('Property') %}
{% if Property.attrib['Description'] is defined %}    // {{ Property.attrib['Description'] }}{% endif %}

    static ScriptCanvas::SlotId Get{{ Property.attrib['Name'] | replace(' ','') }}SlotId(const ScriptCanvas::Node* owner)
    {
        return owner->GetSlotId("{{ Property.attrib['Name'] }}");
    }

    static ScriptCanvas::Slot* Get{{ Property.attrib['Name'] | replace(' ','') }}Slot(const ScriptCanvas::Node* owner)
    {
        return owner->GetSlot(Get{{ Property.attrib['Name'] | replace(' ','') }}SlotId(owner));
    }

    static {{ Property.attrib['Type'] }} Get{{ Property.attrib['Name'] | replace(' ','') }}(ScriptCanvas::Node* owner);

{%         endfor %}
{%         for Property in Class.iter('DynamicDataSlot') %}
{% if Property.attrib['Description'] is defined %}    // {{ Property.attrib['Description'] }}{% endif %}

    static ScriptCanvas::SlotId Get{{ Property.attrib['Name'] }}SlotId(const ScriptCanvas::Node* owner)
    {
        return owner->GetSlotId("{{ Property.attrib['Name'] }}");
    }

    static ScriptCanvas::Slot* Get{{ Property.attrib['Name'] }}Slot(const ScriptCanvas::Node* owner)
    {
        return owner->GetSlot(Get{{ Property.attrib['Name'] }}SlotId(owner));
    }

{%         endfor %}
};

{%     endfor %}
{% endfor %}