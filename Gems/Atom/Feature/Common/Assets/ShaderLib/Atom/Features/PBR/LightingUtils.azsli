/*
* All or portions of this file Copyright (c) Amazon.com, Inc. or its affiliates or
* its licensors.
*
* For complete copyright and license terms please see the LICENSE at the root of this
* distribution (the "License"). All use of this software is governed by the License,
* or, if provided, by the license below or the license accompanying this file. Do not
* remove or modify any license notices. This file is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*
*/

#pragma once

//! Transform cubemap coordinates to the expected cubemap orientation
float3 GetCubemapCoords(float3 original)
{
    return float3(-original.x, original.z, -original.y);
}

//! Compute multiscatter compensation multiplier
float3 GetMultiScatterCompensation(float NdotV, float3 specularF0, float2 brdf, bool enabled)
{
    if (!enabled)
    {
        // skip calculation if compensation is disabled
        return 1.0;
    }

    // returned values of BRDF are formed by split sum approximation as shown below
    // brdf.x = integral{(BRDF / F) * (1 - (1 - VdotH)^5) * NdotL dL} 
    // brdf.y = integral{(BRDF / F) * (1 - VdotH)^5 * NdotL dL}
    // brdf.x + brdf.y = integral{ (BRDF / F) * (1 - alpha + alpha) * NdotL dL }
    //                 = integral{ (BRDF / F) * NdotL dL }
    //                 = integral{ ((GD / 4 * NdotL * NdotV)) * NdotL dL }
    // which is the integral of microfacet BRDF by assuming fresnel term F == 1 that represents total single scattering reflectance
    // for more information about compensation term please see:
    // https://blog.selfshadow.com/publications/turquin/ms_comp_final.pdf
    float3 compensation = specularF0 * ((1.0 / (brdf.x + brdf.y)) - 1.0);
    return compensation + 1.0;
}

// returns the UV coordinates for the BRDF texture
float2 GetBRDFTexCoords(float roughness, float NdotV)
{
    float smoothness = 1.0f - roughness;
    return float2(saturate(NdotV), smoothness);
}

// returns the roughess mip for sampling the convolved specular cubemap
float GetRoughnessMip(float roughness)
{
    const float maxRoughnessMip = 5;
    return roughness * maxRoughnessMip;
}
