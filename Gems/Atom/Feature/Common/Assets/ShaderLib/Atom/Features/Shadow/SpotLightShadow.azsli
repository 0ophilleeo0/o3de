/*
 * All or portions of this file Copyright (c) Amazon.com, Inc. or its affiliates or
 * its licensors.
 * 
 * For complete copyright and license terms please see the LICENSE at the root of this
 * distribution (the "License"). All use of this software is governed by the License,
 * or, if provided, by the license below or the license accompanying this file. Do not
 * move or modify any license notices. This file is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 */

#pragma once

#include <scenesrg.srgi>
#include <viewsrg.srgi>
#include <Atom/Features/PBR/ForwardPassSrg.azsli>
#include <Atom/Features/Shadow/ShadowmapAtlasLib.azsli>
#include <Atom/RPI/Math.azsli>
#include "BicubicPcfFilters.azsli"
#include "JitterTablePcf.azsli"
#include "Shadow.azsli"

// SpotLightShadow calculates lit/shadowed for a spot light.
class SpotLightShadow
{
    //////////
    // public method

    //! This calculates visibility of the surface from the spot light.
    //! @param lightIndex spot light index
    //! @param worldPosition surface position in the world coordinate.
    //! @return 1.0 if lit, 0.0 if shadowed.
    static float GetVisibility(
        uint lightIndex,
        float3 worldPosition,
        float3 lightDirection,
        float3 normalVector);

    static float GetThickness(uint lightIndex, float3 worldPosition);

    //////////
    // private methods
    float GetVisibilityNoFilter();
    float GetVisibilityPcf();
    float GetVisibilityEsm();
    float GetVisibilityEsmPcf();
    float GetThickness();

    float SamplePcfBicubic();

    bool IsShadowed(float3 shadowPosition);
    bool IsShadowedWithJitter(
        float3 jitterUnitX,
        float3 jitterUnitY,
        float jitterDepthDiffBase,
        uint jitterIndex);
    void SetShadowPosition();
    float3 GetAtlasPosition(float2 texturePosition);
    static float UnprojectDepth(uint lightIndex, float depthBufferValue);

    uint m_lightIndex;
    uint m_shadowIndex;
    float3 m_worldPosition;
    float3 m_lightDirection;
    float3 m_normalVector;
    float3 m_shadowPosition;
};

float SpotLightShadow::GetVisibility(
    uint lightIndex, 
    float3 worldPosition,
    float3 lightDirection,
    float3 normalVector)
{
    SpotLightShadow shadow;
    shadow.m_lightIndex = lightIndex;
    shadow.m_shadowIndex = ViewSrg::m_spotLights[lightIndex].m_shadowIndex;
    shadow.m_worldPosition = worldPosition;
    shadow.m_lightDirection = lightDirection;
    shadow.m_normalVector = normalVector;
    shadow.SetShadowPosition();

    // If no shadow, early return.
    if (shadow.m_shadowIndex < 0)
    {
        return 1.0;
    }

    float visibility = 1.;
    switch (ViewSrg::m_spotLightShadows[shadow.m_shadowIndex].m_shadowFilterMethod)
    {
        case ViewSrg::ShadowFilterMethodNone:
            visibility = shadow.GetVisibilityNoFilter();
            break;
        case ViewSrg::ShadowFilterMethodPcf:
            visibility = shadow.GetVisibilityPcf();
            break;
        case ViewSrg::ShadowFilterMethodEsm:
            visibility = shadow.GetVisibilityEsm();
            break;
        case ViewSrg::ShadowFilterMethodEsmPcf:
            visibility = shadow.GetVisibilityEsmPcf();
            break;
    }

    return saturate(visibility);
}    

float SpotLightShadow::UnprojectDepth(uint lightIndex, float depthBufferValue)
{   
    // Unproject the perspective matrix that was built in SpotLightFeatureProcessor.cpp
    // (Right-hand with non-reversed depth)
    // Should look something like the following:    
    // [... ... ... ...][x]
    // [... ... ... ...][y]
    // [... ...  A   B ][z]
    // [... ... -1  ...][1]
    // unprojectConstants contains the A and B values
    
    const float2 unprojectConstants = ViewSrg::m_spotLightShadows[lightIndex].m_unprojectConstants;
    return -unprojectConstants.y / (depthBufferValue + unprojectConstants.x);
}

float SpotLightShadow::GetThickness(uint lightIndex, float3 worldPosition)
{
    SpotLightShadow shadow;
    shadow.m_lightIndex = lightIndex;
    shadow.m_worldPosition = worldPosition;
    shadow.m_shadowIndex = ViewSrg::m_spotLights[lightIndex].m_shadowIndex;
    shadow.SetShadowPosition();
    return shadow.GetThickness();
}

float SpotLightShadow::GetVisibilityNoFilter()
{
    return IsShadowed(m_shadowPosition) ? 0. : 1.;
}

float SpotLightShadow::GetVisibilityPcf()
{
    if (ViewSrg::m_spotLightShadows[m_shadowIndex].m_pcfFilterMethod == PcfFilterMethod_Bicubic)
    {
        return SamplePcfBicubic();
    }

    const uint predictionCount = ViewSrg::m_spotLightShadows[m_shadowIndex].m_predictionSampleCount;

    if (predictionCount <= 1)
    {
        return GetVisibilityNoFilter();
    }

    const float4 jitterUnitVectorDepthDiffBase =
        Shadow::GetJitterUnitVectorDepthDiffBase(m_normalVector, m_lightDirection);
    const float3 jitterUnitY = jitterUnitVectorDepthDiffBase.xyz;
    const float3 jitterUnitX = cross(jitterUnitY, m_lightDirection);
    const float jitterDepthDiffBase = jitterUnitVectorDepthDiffBase.w;

    uint shadowedCount = 0;
    uint jitterIndex = 0;

    // Predicting
    for (; jitterIndex < predictionCount; ++jitterIndex)
    {
        if (IsShadowedWithJitter(
            jitterUnitX,
            jitterUnitY,
            jitterDepthDiffBase,
            jitterIndex))
        {
            ++shadowedCount;
        }
    }
    if (shadowedCount == 0)
    {
        return 1.;
    }
    else if (shadowedCount == predictionCount)
    {
        return 0.;
    }

    // Filtering

    // When the prediction detects the point on the boundary of shadow,
    // i.e., both of a lit point and a a shadowed one exists in the jittering area,
    // we calculate the more precious lit ratio in the area.
    const uint filteringCount = max(
        predictionCount,
        ViewSrg::m_spotLightShadows[m_shadowIndex].m_filteringSampleCount);

    for (; jitterIndex < filteringCount; ++jitterIndex)
    {
        if (IsShadowedWithJitter(
            jitterUnitX,
            jitterUnitY,
            jitterDepthDiffBase,
            jitterIndex))
        {
            ++shadowedCount;
        }
    }

    return (filteringCount - shadowedCount) * 1. / filteringCount;
}

float SpotLightShadow::GetVisibilityEsm()
{
    static const float PixelMargin = 1.5; // avoiding artifact on the edge of shadowmap.

    const uint size = ViewSrg::m_spotLightShadows[m_shadowIndex].m_shadowmapSize;
    if (size <= 1)
    {
        return 1.; // There is no shadowmap for this light.
    }

    const float invAtlasSize = ViewSrg::m_invShadowmapAtlasSize;
    const Texture2DArray<float> expShadowmap = PassSrg::m_spotLightExponentialShadowmap;

    if (m_shadowPosition.x >= 0 && m_shadowPosition.x * size < size - PixelMargin &&
        m_shadowPosition.y >= 0 && m_shadowPosition.y * size < size - PixelMargin)
    {
        const float3 coefficients = float3(
            ViewSrg::m_esmsSpot[m_shadowIndex].m_n_f_n,
            ViewSrg::m_esmsSpot[m_shadowIndex].m_n_f,
            ViewSrg::m_esmsSpot[m_shadowIndex].m_f);
        if (coefficients.x == 0.) 
        {
            return 1.;
        }
        const float3 atlasPosition = GetAtlasPosition(m_shadowPosition.xy);
        const float depth = PerspectiveDepthToLinear(
            m_shadowPosition.z, 
            coefficients);
        const float expDepthInShadowmap = expShadowmap.Sample(
            PassSrg::LinearSampler, 
            float3(atlasPosition.xy * invAtlasSize, atlasPosition.z)).r;
        const float ratio = exp(-EsmExponentialShift * depth) * expDepthInShadowmap;
        // pow() mitigates light bleeding to shadows from near shadow casters.
        return saturate( pow(ratio, 8) );
    }

    return 1.;
}

float SpotLightShadow::GetVisibilityEsmPcf()
{
    static const float PixelMargin = 1.5; // avoiding artifact on the edge of shadowmap;

    const uint size = ViewSrg::m_spotLightShadows[m_shadowIndex].m_shadowmapSize;
    if (size <= 1)
    {
        return 1.; // There is no shadowmap for this light.
    }

    const float invAtlasSize = ViewSrg::m_invShadowmapAtlasSize;
    const Texture2DArray<float> expShadowmap = PassSrg::m_spotLightExponentialShadowmap;

    if (m_shadowPosition.x >= 0 && m_shadowPosition.x * size < size - PixelMargin &&
        m_shadowPosition.y >= 0 && m_shadowPosition.y * size < size - PixelMargin)
    {
        const float3 coefficients = float3(
            ViewSrg::m_esmsSpot[m_shadowIndex].m_n_f_n,
            ViewSrg::m_esmsSpot[m_shadowIndex].m_n_f,
            ViewSrg::m_esmsSpot[m_shadowIndex].m_f);
        if (coefficients.x == 0.)
        {
            return 1.;
        }
        const float3 atlasPosition = GetAtlasPosition(m_shadowPosition.xy);
        const float depth = PerspectiveDepthToLinear(
            m_shadowPosition.z,
            coefficients);
        const float expDepthInShadowmap = expShadowmap.Sample(
            PassSrg::LinearSampler,
            float3(atlasPosition.xy * invAtlasSize, atlasPosition.z)).r;
        float ratio = exp(-EsmExponentialShift * depth) * expDepthInShadowmap;

        static const float pcfFallbackThreshold = 1.04;
        if (ratio > pcfFallbackThreshold)
        {
            ratio = GetVisibilityPcf();
        }
        else
        {
            // pow() mitigates light bleeding to shadows from near shadow casters.
            ratio = pow(ratio, 8);
        }
        return saturate(ratio);
    }

    return 1.;
}

float SpotLightShadow::GetThickness()
{
    static const float PixelMargin = 1.5; // avoiding artifact between cascade levels.

    const uint size = ViewSrg::m_spotLightShadows[m_shadowIndex].m_shadowmapSize;
    if (size <= 1)
    {
        return 0.;
    }

    const float invAtlasSize = ViewSrg::m_invShadowmapAtlasSize;
    const Texture2DArray<float> shadowmap = PassSrg::m_spotLightShadowmaps;

    if (m_shadowPosition.x >= 0 && m_shadowPosition.x * size < size - PixelMargin &&
        m_shadowPosition.y >= 0 && m_shadowPosition.y * size < size - PixelMargin)
    {
        const float3 atlasPosition = GetAtlasPosition(m_shadowPosition.xy);

        const float depthValue = shadowmap.Sample(PassSrg::LinearSampler,  
            float3(atlasPosition.xy * invAtlasSize, atlasPosition.z)).r;
            
        const float viewSpaceThickness = abs(UnprojectDepth(m_shadowIndex, m_shadowPosition.z) - UnprojectDepth(m_shadowIndex, depthValue)); 
        return viewSpaceThickness;    
    }

    return 0.;
}

float SpotLightShadow::SamplePcfBicubic()
{
    const uint filteringSampleCount = ViewSrg::m_spotLightShadows[m_shadowIndex].m_filteringSampleCount;
    const float3 atlasPosition = GetAtlasPosition(m_shadowPosition.xy);   

    SampleShadowMapBicubicParameters param;
    param.shadowMap = PassSrg::m_spotLightShadowmaps;
    param.shadowPos = float3(atlasPosition.xy * ViewSrg::m_invShadowmapAtlasSize, atlasPosition.z);
    param.shadowMapSize = ViewSrg::m_shadowmapAtlasSize;
    param.invShadowMapSize = ViewSrg::m_invShadowmapAtlasSize;
    param.comparisonValue = m_shadowPosition.z;
    param.samplerState = SceneSrg::m_hwPcfSampler;

    if (filteringSampleCount <= 4)       
    {
        return SampleShadowMapBicubic_4Tap(param);
    }
    else if (filteringSampleCount <= 9)
    {
        return SampleShadowMapBicubic_9Tap(param);
    }
    else
    {
        return SampleShadowMapBicubic_16Tap(param);
    }
}

bool SpotLightShadow::IsShadowed(float3 shadowPosition)
{
    static const float PixelMargin = 1.5; // avoiding artifact between cascade levels.

    ViewSrg::SpotLightShadow shadow = ViewSrg::m_spotLightShadows[m_shadowIndex];

    const uint size = shadow.m_shadowmapSize;
    if (size <= 1)
    {
        return false; // There is no shadowmap for this light.
    }

    const float invAtlasSize = ViewSrg::m_invShadowmapAtlasSize;
    const Texture2DArray<float> shadowmap = PassSrg::m_spotLightShadowmaps;

    if (shadowPosition.x >= 0 && shadowPosition.x * size < size - PixelMargin &&
        shadowPosition.y >= 0 && shadowPosition.y * size < size - PixelMargin)
    {
        float3 atlasPosition = GetAtlasPosition(shadowPosition.xy);
        const float depthInShadowmap = shadowmap.Sample(
            PassSrg::LinearSampler,
            float3(atlasPosition.xy * invAtlasSize, atlasPosition.z)).r;
        const float depthDiff = depthInShadowmap - shadowPosition.z;
        if (depthDiff < -shadow.m_bias)
        {
            return true;
        }
    }

    return false;
}

bool SpotLightShadow::IsShadowedWithJitter(
    float3 jitterUnitX,
    float3 jitterUnitY,
    float jitterDepthDiffBase,
    uint jitterIndex)
{
    ViewSrg::SpotLightShadow shadow = ViewSrg::m_spotLightShadows[m_shadowIndex];
    const float4x4 depthBiasMatrix = shadow.m_depthBiasMatrix;
    const float boundaryScale = shadow.m_boundaryScale;

    ViewSrg::SpotLight spotLight = ViewSrg::m_spotLights[m_lightIndex];
    float3 shadowCasterPosition = spotLight.m_position;

    const float outerConeAngle = spotLight.m_outerConeAngle;
    const float2 jitterXY = g_jitterTablePcf[jitterIndex];

    const float dist = distance(m_worldPosition, shadowCasterPosition);
    const float boundaryRadius = dist * tan(boundaryScale);
    // jitterWorldXY is the jittering diff vector from the lighted point on the surface
    // in the world space.  It is remarked as "v_J" in the comment
    // named "Calculate depth adjusting diff for jittered samples"
    // just before the function GetJitterUnitVectorDepthDiffBase.
    const float3 jitterWorldXY = jitterUnitX * (jitterXY.x * boundaryRadius) + jitterUnitY * (jitterXY.y * boundaryRadius);
    // The adjusting diff of depth ("d" in the comment) is calculated by
    //   jitterXY.y * boundaryRadius * jitterDepthDiffBase.
    const float3 jitterWorldZ = m_lightDirection * (jitterXY.y * boundaryRadius * jitterDepthDiffBase);

    const float3 jitteredWorldPosition = m_worldPosition + jitterWorldXY + jitterWorldZ;
    const float4 jitteredShadowmapHomogeneous = mul(depthBiasMatrix, float4(jitteredWorldPosition, 1));

    return IsShadowed(jitteredShadowmapHomogeneous.xyz / jitteredShadowmapHomogeneous.w);
}

void SpotLightShadow::SetShadowPosition()
{
    const float4x4 depthBiasMatrix = ViewSrg::m_spotLightShadows[m_shadowIndex].m_depthBiasMatrix;
    float4 shadowPositionHomogeneous = mul(depthBiasMatrix, float4(m_worldPosition, 1));
    m_shadowPosition = shadowPositionHomogeneous.xyz / shadowPositionHomogeneous.w;
}

float3 SpotLightShadow::GetAtlasPosition(float2 texturePosition)
{
    const uint2 originInSlice = ViewSrg::m_spotLightShadows[m_shadowIndex].m_shadowmapOriginInSlice;
    const uint shadowmapSize = ViewSrg::m_spotLightShadows[m_shadowIndex].m_shadowmapSize;
    const uint slice = ViewSrg::m_spotLightShadows[m_shadowIndex].m_shadowmapArraySlice;

    const float2 coordInTexture = texturePosition * shadowmapSize + originInSlice;

    return float3(coordInTexture, slice);
}
