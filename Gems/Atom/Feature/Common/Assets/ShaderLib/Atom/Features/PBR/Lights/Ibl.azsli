/*
* All or portions of this file Copyright (c) Amazon.com, Inc. or its affiliates or
* its licensors.
*
* For complete copyright and license terms please see the LICENSE at the root of this
* distribution (the "License"). All use of this software is governed by the License,
* or, if provided, by the license below or the license accompanying this file. Do not
* remove or modify any license notices. This file is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*
*/

#pragma once

#include <Atom/Features/PBR/Lights/LightTypesCommon.azsli>

void EvalPrecomputedIbl(Surface surface, float3 dirToCamera, float2 brdf, out float3 outDiffuse, out float3 outSpecular)
{   
    float NdotV = dot(surface.normal, dirToCamera);
    NdotV =  max(NdotV, 0.01f);    // [GFX TODO][ATOM-4466] This is a current band-aid for specular noise at grazing angles.

    // Using a roughness-based fresnel to get proper diffuse response from environment map lookup.
    // Note we may need to iterate on the use of roughnessA vs roughnessLinear here, and even alternate ways to calculate the fresnel response.
    float3 specularResponse = FresnelSchlickWithRoughness(NdotV, surface.specularF0, surface.roughnessLinear);
    float3 diffuseResponse = 1.0 - specularResponse;
    
    if(o_clearCoat_feature_enabled)
    {
        // Clear coat layer has fixed IOR = 1.5 and transparent => F0 = (1.5 - 1)^2 / (1.5 + 1)^2 = 0.04
        diffuseResponse *= 1.0 - (FresnelSchlickWithRoughness(NdotV, float3(0.04, 0.04, 0.04), surface.clearCoatRoughness) * surface.clearCoatFactor);
    }

    // Irradiance from the global IBL
    float3 irradianceDir = MultiplyVectorQuaternion(surface.normal, SceneSrg::m_iblOrientation);
    float3 diffuseSample = SceneSrg::m_diffuseEnvMap.Sample(SceneSrg::m_samplerEnv, GetCubemapCoords(irradianceDir)).rgb;

    outDiffuse = diffuseResponse * surface.albedo * diffuseSample;

    // Specular from the global IBL.
    float3 reflectDir = reflect(-dirToCamera, surface.normal);
    outSpecular = SceneSrg::m_specularEnvMap.SampleLevel(SceneSrg::m_samplerEnv, GetCubemapCoords(reflectDir), GetRoughnessMip(surface.roughnessLinear)).rgb;
    outSpecular *= (surface.specularF0 * brdf.x + brdf.y); // Apply BRDF scale terms (BRDF magnitude and Schlick Fresnel)
}
