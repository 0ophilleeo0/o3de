#pragma once

#include <Atom/Features/PBR/Surface.azsli>

// Analytical integation (approximation) of diffusion profile over radius, could be replaced by other pre integrated kernels
// such as sum of Gaussian
float3 TransmissionKernel(float t, float3 s)
{
    float3 exponent = s * t;
    return 0.25 * (1.0 / exp(exponent) + 3.0 / exp(exponent / 3.0));
}

float3 GetBackLighting(Surface surface, float3 lightIntensity, float3 dirToCamera, float3 dirToLight, float shadowRatio)
{
    float3 result = float3(0.0, 0.0, 0.0);
    float thickness = 0.0; 

    switch(o_transmission_mode)
    {
        case TransmissionMode::None:
            break;
        // Thick object mode, using back lighting approximation proposed by Brisebois B. C. and Bouchard M. 2011
        // https://colinbarrebrisebois.com/2011/03/07/gdc-2011-approximating-translucency-for-a-fast-cheap-and-convincing-subsurface-scattering-look/
        case TransmissionMode::ThickObject: 
            thickness = max(shadowRatio, surface.thickness);
            // (transmittance) * (Lambert's attenuation) * light intensity
            result = (pow(saturate(dot(dirToCamera, -normalize(dirToLight + surface.normal * surface.transmissionParams.z))), surface.transmissionParams.y) * surface.transmissionParams.w) * 
                          (exp(-thickness * surface.transmissionParams.x) * saturate(1.0 - thickness)) * 
                           lightIntensity;
            break;
        // Thin object mode, using thin-film assumption proposed by Jimenez J. et al, 2010, "Real-Time Realistic Skin Translucency"
        // http://www.iryoku.com/translucency/downloads/Real-Time-Realistic-Skin-Translucency.pdf
        case TransmissionMode::ThinObject:
            result = shadowRatio ? float3(0.0, 0.0, 0.0) : TransmissionKernel(surface.thickness * surface.transmissionParams.w, rcp(surface.transmissionParams.xyz)) * 
                           saturate(dot(-surface.normal, dirToLight)) * lightIntensity * shadowRatio;
    }
    
    return result;
}

