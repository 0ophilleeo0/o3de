/*
* All or portions of this file Copyright (c) Amazon.com, Inc. or its affiliates or
* its licensors.
*
* For complete copyright and license terms please see the LICENSE at the root of this
* distribution (the "License"). All use of this software is governed by the License,
* or, if provided, by the license below or the license accompanying this file. Do not
* remove or modify any license notices. This file is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*
*/

#pragma once

option bool o_specularF0_enableMultiScatterCompensation;
option bool o_enableShadows = true;
option bool o_enableDirectionalLights = true;
option bool o_enablePunctualLights = true;
option bool o_enableAreaLights = true;
option bool o_enableIBL = true;
option bool o_enableSubsurfaceScattering;
option bool o_clearCoat_feature_enabled;
option enum class TransmissionMode {None, ThickObject, ThinObject} o_transmission_mode;

#include <viewsrg.srgi>
#include <scenesrg.srgi>

#include <Atom/RPI/ShaderResourceGroups/DefaultDrawSrg.azsli>

#include <Atom/RPI/Math.azsli>
#include <Atom/RPI/TangentSpace.azsli>

#include <Atom/Features/PBR/DefaultObjectSrg.azsli>
#include <Atom/Features/PBR/ForwardPassSrg.azsli>

#include <Atom/Features/PBR/Surface.azsli>
#include <Atom/Features/PBR/Decals.azsli>
#include <Atom/Features/PBR/Lights/DirectionalLight.azsli>
#include <Atom/Features/PBR/Lights/PointLight.azsli>
#include <Atom/Features/PBR/Lights/SpotLight.azsli>
#include <Atom/Features/PBR/Lights/DiskLight.azsli>
#include <Atom/Features/PBR/Lights/CapsuleLight.azsli>
#include <Atom/Features/PBR/Lights/PolygonLight.azsli>
#include <Atom/Features/PBR/Lights/QuadLight.azsli>
#include <Atom/Features/PBR/Lights/Ibl.azsli>

/**
* The StandardPBR Material Template provides a foundation for creating PBR base materials.
* A default StandardPBR base material is provided as well, built on top of this template, and
* should suit many needs. Additional base materials can created as needed, using StandardPBR.material
* as a reference.
*/ 

// VSInput, VSOutput, ObjectSrg must be defined before including this file.

//! @param skipShadowCoords can be useful for example when PixelDepthOffset is enable, because the pixel shader will have to run before the final world position is known
void PbrVsHelper(in VSInput IN, inout VSOutput OUT, float3 worldPosition, bool skipShadowCoords = false)
{
    OUT.m_worldPosition = worldPosition;
    OUT.m_position = mul(ViewSrg::m_viewProjectionMatrix, float4(OUT.m_worldPosition, 1.0));
    
    float4x4 objectToWorld = ObjectSrg::GetWorldMatrix();
    float3x3 objectToWorldIT = ObjectSrg::GetWorldMatrixInverseTranspose();

    ConstructTBN(IN.m_normal, IN.m_tangent, IN.m_bitangent, objectToWorld, objectToWorldIT, OUT.m_normal, OUT.m_tangent, OUT.m_bitangent);
    
    // directional light shadow 
    const uint shadowIndex = ViewSrg::m_shadowIndexDirectionalLight;
    if (o_enableShadows && !skipShadowCoords && shadowIndex < SceneSrg::m_directionalLightCount)
    {
        DirectionalLightShadow::GetShadowCoords(
            shadowIndex,
            worldPosition,
            OUT.m_shadowCoords);
    }
}

struct PbrLightingOutput
{
    float4 m_diffuseColor;
    float4 m_specularColor;
    float4 m_albedo;
    float4 m_specularF0;
    float4 m_normal;
    float4 m_clearCoatNormal;
    float3 m_scatterDistance;
};

PbrLightingOutput PbrLighting(  in VSOutput IN,
                                float3 baseColor,
                                float metallic,
                                float roughness,
                                float specularF0Factor,
                                float3 normal,
                                float3 vtxTangent,
                                float3 vtxBitangent,
                                float2 anisotropy,  // angle and factor
                                float3 emissive,
                                float occlusion,
                                float4 transmissionTintThickness,
                                float4 transmissionParams,
                                float clearCoatFactor,
                                float clearCoatRoughness,
                                float3 clearCoatNormal,
                                float alpha,
                                OpacityMode opacityMode)
{
    static const float3 MaxDielectricSpecularF0 = 0.08f;
    float3 dirToCamera = normalize(ViewSrg::m_worldPosition.xyz - IN.m_worldPosition);

    // sample BRDF map (indexed by smoothness values rather than roughness)
    float NdotV = dot(normal, dirToCamera);
    float2 brdfUV = float2(saturate(NdotV), (1.0f - roughness));
    float2 brdf = PassSrg::m_brdfMap.Sample(PassSrg::LinearSampler, brdfUV).rg;

    // compute albedo and specularF0 based on metalness
    float3 albedo = (o_enableSubsurfaceScattering) ? baseColor : lerp(baseColor, float3(0.0f, 0.0f, 0.0f), metallic);
    
    // since the left hand side value of this interpolation is achromatic color, this value doesn't convert a color space.
    float3 dielectricSpecularF0 = MaxDielectricSpecularF0 * specularF0Factor;

    // because most of metal material theoratically conflicts with subsurface scattering
    // (electrons hit to a conductor will be either 'absorbed' or reflected hence no chance to transmit),
    // metallic is disabled if subsurface scattering turned on
    float3 specularF0 = (o_enableSubsurfaceScattering) ?  dielectricSpecularF0 : lerp(dielectricSpecularF0, baseColor, metallic);

    // manipulate base layer f0 if clear coat is enabled
    if(o_clearCoat_feature_enabled)
    {
        // modify base layer's normal incidence reflectance
        // for the derivation of the following equation please refer to:
        // https://google.github.io/filament/Filament.md.html#materialsystem/clearcoatmodel/baselayermodification
        float3 f0 = (1.0 - 5.0 * sqrt(specularF0)) / (5.0 - sqrt(specularF0));
        specularF0 = lerp(specularF0, f0 * f0, clearCoatFactor);
    }

    // compute specular and diffuse response
    float3 specularResponse = FresnelSchlickWithRoughness(NdotV, specularF0, roughness);
    float3 diffuseResponse = 1.0 - specularResponse;
    
    if (o_clearCoat_feature_enabled)
    {
        // Clear coat layer has fixed IOR = 1.5 and transparent => F0 = (1.5 - 1)^2 / (1.5 + 1)^2 = 0.04
        diffuseResponse *= 1.0 - (FresnelSchlickWithRoughness(NdotV, float3(0.04, 0.04, 0.04), clearCoatRoughness) * clearCoatFactor);
    }

    // Set up the surface parameters.
    Surface surface = (Surface)0.0;
    surface.position = IN.m_worldPosition.xyz;
    surface.normal = normal;
    surface.albedo = albedo;
    surface.specularF0 = specularF0;
    surface.multiScatterCompensation = GetMultiScatterCompensation(NdotV, surface.specularF0, brdf, o_specularF0_enableMultiScatterCompensation);
    // The roughness value in microfacet calculations (called "alpha" in the literature) does not give perceptually
    // linear results. Disney found that squaring the roughness value before using it in microfacet equations causes
    // the user-provided roughness parameter to be more perceptually linear. We keep both values available as some
    // equations need roughnessLinear (i.e. IBL sampling) while others need roughnessA (i.e. GGX equations).
    // See Burley's Disney PBR: https://pdfs.semanticscholar.org/eeee/3b125c09044d3e2f58ed0e4b1b66a677886d.pdf
    surface.roughnessLinear = roughness; 
    surface.thickness = transmissionTintThickness.w;
    
    // Thick object mode: (attenuation coefficient, power, distortion, scale)
    // Thin  object mode:  (float3 scatter distance, scale)
    surface.transmissionParams = transmissionParams;

    // Parameters: (clear coat factor, perceptual roughness)
    surface.clearCoatFactor = clearCoatFactor;
    surface.clearCoatRoughness = clearCoatRoughness;
    surface.clearCoatNormal = clearCoatNormal;

    // Make sure roughnessA is above 0 to avoid precision and divide by zero issues. 0.0005f is sufficient for directional lights since they tend to be quite bright.
    surface.roughnessA = max(roughness * roughness, 0.0005f);

    if (o_enableAnisotropy)
    {
        CalculateSurfaceDirectionalAnisotropicData(surface, anisotropy, vtxTangent, vtxBitangent);
    }

    float3 diffuseLighting = 0.0f; // accumulation of diffuse lighting
    float3 specularLighting = 0.0f; // accumulation of specular lighting
    float3 translucentBackLighting = 0.0f; // accumulation of transmitted light on the back face of object for back lighting

    LightCullingTileIterator tileIterator;
    tileIterator.Init(IN.m_position, PassSrg::m_lightListRemapped, PassSrg::m_tileLightData);
    
    ApplyDecals(tileIterator, surface);

    if (o_enablePunctualLights)
    {
        ApplyPointLights(tileIterator, dirToCamera, surface, diffuseLighting, specularLighting, translucentBackLighting);
        ApplySpotLights(tileIterator, dirToCamera, surface, diffuseLighting, specularLighting, translucentBackLighting);
    }

    if (o_enableAreaLights)
    {
        ApplyDiskLights(tileIterator, dirToCamera, surface, diffuseLighting, specularLighting, translucentBackLighting);
        ApplyCapsuleLights(tileIterator, dirToCamera, surface, diffuseLighting, specularLighting, translucentBackLighting);
        ApplyQuadLights(tileIterator, dirToCamera, surface, diffuseLighting, specularLighting, translucentBackLighting);
        ApplyPolygonLights(dirToCamera, surface, diffuseLighting, specularLighting, translucentBackLighting);
    }

    if (opacityMode == OpacityMode::Blended || opacityMode == OpacityMode::TintedTransparent)
    {
        // transparencies currently require IBL in the forward pass
        float3 iblDiffuse = 0.0f;
        float3 iblSpecular = 0.0f;
        if (o_enableIBL)
        {
            EvalPrecomputedIbl(surface, dirToCamera, brdf, iblDiffuse, iblSpecular);
        }

        // Apply ambient occlusion to indirect diffuse
        iblDiffuse *= occlusion;

        // Adjust IBL lighting by exposure.
        float iblExposureFactor = pow(2.0, SceneSrg::m_iblExposure);
        iblDiffuse *= iblExposureFactor;
        iblSpecular *= iblExposureFactor;
        diffuseLighting += iblDiffuse;
        specularLighting += iblSpecular;

        alpha = FresnelSchlickWithRoughness(NdotV, alpha, roughness).x; // Increase opacity at grazing angles.
    }

    // Emissive contribution
    // Emissive light is apply to specular now, as diffuse will be used for subsurface scattering later down the pipeline
    // We may change this if specular is also used for other processing
    specularLighting += emissive;

    if (o_enableDirectionalLights)
    {
        ApplyDirectionalLights(dirToCamera, surface, IN.m_shadowCoords, diffuseLighting, specularLighting, translucentBackLighting);
    }

    // Transmitted light
    if(o_transmission_mode != TransmissionMode::None)
    {
        diffuseLighting += translucentBackLighting * transmissionTintThickness.xyz;
    }

    PbrLightingOutput lightingOutput;

    lightingOutput.m_diffuseColor = float4(diffuseLighting, alpha);
    lightingOutput.m_specularColor = float4(specularLighting, 1.0);

    // albedo, specularF0, roughness, and normals for later passes (specular IBL, Diffuse GI, SSR, AO, etc)
    lightingOutput.m_specularF0 = float4(specularF0, roughness);
    lightingOutput.m_albedo.rgb = surface.albedo * diffuseResponse;
    lightingOutput.m_albedo.a = occlusion;
    lightingOutput.m_normal.rgb = EncodeNormalSignedOctahedron(normal);
    lightingOutput.m_normal.a = o_specularF0_enableMultiScatterCompensation ? 1.0f : 0.0f;
    
    // layout: (packedNormal.x, packedNormal.y, strength factor, clear coat roughness (not base material's roughness))
    lightingOutput.m_clearCoatNormal = float4(EncodeNormalSphereMap(clearCoatNormal), o_clearCoat_feature_enabled ? clearCoatFactor : 0.0, clearCoatRoughness);

    return lightingOutput;
}
