/*
* All or portions of this file Copyright (c) Amazon.com, Inc. or its affiliates or
* its licensors.
*
* For complete copyright and license terms please see the LICENSE at the root of this
* distribution (the "License"). All use of this software is governed by the License,
* or, if provided, by the license below or the license accompanying this file. Do not
* remove or modify any license notices. This file is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*
*/

#pragma once

#include <Atom/Features/SrgSemantics.azsli>

ShaderResourceGroup PassSrg : SRG_PerPass
{
    RWBuffer<float> m_skinnedMeshOutputStream;    
}

ShaderResourceGroup InstanceSrg : SRG_PerDraw
{    
    uint m_numVertices;
    uint m_totalNumberOfThreadsX;

    // Per-model input
    Buffer<float3> m_sourcePositions; // POSITION 0
    Buffer<float3> m_sourceNormals; // NORMAL 0
    Buffer<float4> m_sourceTangents; // TANGENT 0
    Buffer<float3> m_sourceBiTangents; // BITANGENT 0
    ByteAddressBuffer m_sourceBlendIndices; // BLENDINDICES 0
    Buffer<float> m_sourceBlendWeights; // BLENDWEIGHTS 0
    
    // Per-instance input
    StructuredBuffer<float3x4> m_boneTransformsLinear;
    StructuredBuffer<float2x4> m_boneTransformsDualQuaternion;

    // Per-instance morph target input
    uint m_morphTargetPositionDeltaOffset;
    uint m_morphTargetNormalDeltaOffset;
    uint m_morphTargetTangentDeltaOffset;
    uint m_morphTargetBitangentDeltaOffset;
    float m_morphTargetDeltaInverseIntegerEncoding;
    
    // Per-instance output
    uint m_targetPositions;
    uint m_targetNormals;
    uint m_targetTangents;
    uint m_targetBiTangents;
}
