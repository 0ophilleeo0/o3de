/*
* All or portions of this file Copyright (c) Amazon.com, Inc. or its affiliates or
* its licensors.
*
* For complete copyright and license terms please see the LICENSE at the root of this
* distribution (the "License"). All use of this software is governed by the License,
* or, if provided, by the license below or the license accompanying this file. Do not
* remove or modify any license notices. This file is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*
*/

#include <Atom/RPI/Math.azsli>

float4 ReconstructWorldPositionFromDepth(float2 screenCoords, uint sampleIndex)
{
    float depth = PassSrg::m_depth.Load(screenCoords, sampleIndex).r;

    uint2 dimensions;
    uint samples;
    PassSrg::m_depth.GetDimensions(dimensions.x, dimensions.y, samples);
    float2 UV = saturate(screenCoords / dimensions.xy);

    float x = UV.x * 2.0f - 1.0f;
    float y = (1.0f - UV.y) * 2.0f - 1.0f;
    float4 projectedPos = float4(x, y, depth, 1.0f);
    float4 positionVS = mul(ViewSrg::m_projectionMatrixInverse, projectedPos);
    positionVS /= positionVS.w;
    float4 positionWS = mul(ViewSrg::m_viewMatrixInverse, positionVS);
    return positionWS;
}

// computes [0..1] percentage of a point that's in between the inner and outer AABBs
float ComputeLerpBetweenInnerOuterAABBs(float3 innerAabbMin, float3 innerAabbMax, float3 outerAabbMax, float3 aabbPos, float3 position)
{
    float3 closestPointOnInnerAabb = AabbClosestPoint(innerAabbMin, innerAabbMax, position);

    // find the distance to the outer AABB by intersecting the ray from the closestPointOnInnerAabb through the position
    // to each plane of the AABB, and take the shortest hit - this is the closest AABB plane to our point

    // translate the points and outer AABB to the origin
    // take the abs() of the points to move them to the max quadrant of the outer AABB so everything is positive
    outerAabbMax -= aabbPos;
    position = abs(position - aabbPos);
    closestPointOnInnerAabb = abs(closestPointOnInnerAabb - aabbPos);
    float3 dirToPoint = normalize(position - closestPointOnInnerAabb);

    // intersect the ray from the closest point through the position with all three planes of the AABB
    // using outerAabbMax as the plane point and the plane normal defined in the array above (n.p = d)
    // Note: this is an optimized form of the following equation, performed simultaneously in all three planes:
    //       abs(dot(planeNormal, (outerAabbMax - position)) / dot(planeNormal, dirToPoint));
    float3 distance = abs(outerAabbMax - position) / dirToPoint;
    float shortestDistance = min(min(distance.x, distance.y), distance.z);

    // divide the distance by the total distance between the two intersect points
    // this is the blend weight for this pixel, e.g., 
    // if (shortest distance == total distance) the blend is 1 since it's on the inner AABB
    // if (shortest distance == 0) the blend is 0 since it's on the outer AABB
    // if in between then it's the [0..1] percentage of the distance between inner and outer
    // if the inner and outer AABBs are identical then it's on both and the blend is 1
    float3 outerAabbIntersect = position + (dirToPoint * shortestDistance);
    float totalDistance = length(outerAabbIntersect - closestPointOnInnerAabb);
    return totalDistance > 0.0f ? saturate(shortestDistance / totalDistance) : 1.0f;
}
