/*
* All or portions of this file Copyright (c) Amazon.com, Inc. or its affiliates or
* its licensors.
*
* For complete copyright and license terms please see the LICENSE at the root of this
* distribution (the "License"). All use of this software is governed by the License,
* or, if provided, by the license below or the license accompanying this file. Do not
* remove or modify any license notices. This file is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*
*/

#pragma once

#include <Atom/Features/ColorManagement/TransformColor.azsli>

// This file provides utilities for common handling of inputs for the base color of PBR materials.

// These macros can be used to declare common shader inputs for this feature. 
// Use the COMMON_SRG_INPUTS_* macro in your material SRG definition, and use the COMMON_OPTIONS_* macro at the global scope in your shader. Then you can pass these variables to the Get*Input() function below.
// You can optionally provide a prefix for the set of inputs which corresponds to a prefix string supplied by the .materialtype file. This is common for multi-layered material types.

#define COMMON_SRG_INPUTS_BASE_COLOR(prefix) \
float3    prefix##m_baseColor;   \
float     prefix##m_baseColorFactor; \
uint      prefix##m_baseColorMapUvIndex; \
Texture2D prefix##m_baseColorMap;

#define COMMON_OPTIONS_BASE_COLOR(prefix) \
option bool prefix##o_baseColor_useTexture; \
option TextureBlendMode prefix##o_baseColorTextureBlendMode = TextureBlendMode::Multiply;

enum class TextureBlendMode { Multiply, LinearLight, Lerp };

// See https://en.wikipedia.org/wiki/Blend_modes#Dodge_and_burn
float3 TextureBlend_LinearLight(float3 base, float3 mask)
{
    return saturate(base + 2 * mask - 1);
}

float3 GetBaseColorInput(Texture2D map, sampler mapSampler, float2 uv, float3 baseColor, bool useTexture)
{
    if(useTexture)
    {
        float3 sampledAbledo = map.Sample(mapSampler, uv).rgb;
        return TransformColor(sampledAbledo, ColorSpaceId::LinearSRGB, ColorSpaceId::ACEScg);
    }
    return baseColor;
}

float3 BlendBaseColor(float3 sampledBaseColor, float3 baseColor, float factor, TextureBlendMode blendMode, bool useTexture)
{
    // [GFX TODO][ATOM-1761] Figure out how we want our base material to expect channels to be encoded, and apply that to the way we pack alpha. 
    if (useTexture)
    {
        switch (blendMode)
        {
            case TextureBlendMode::Multiply:
                baseColor = factor * baseColor * sampledBaseColor;
                break;

            case TextureBlendMode::Lerp:
                baseColor = lerp(baseColor, sampledBaseColor, factor);
                break;

            case TextureBlendMode::LinearLight:
                {
                    // For more info on this blend mode: https://wiki.agscollab.com/pages/viewpage.action?pageId=15764930
                    // [GFX TODO][ATOM-3237] See if we can avoid these extra color space conversions...
                    
                    // To get blend behavior that mimics photoshop, convert to sRGB
                    sampledBaseColor = TransformColor(sampledBaseColor, ColorSpaceId::ACEScg, ColorSpaceId::SRGB);
                    float3 baseColorSRGB = TransformColor(baseColor, ColorSpaceId::ACEScg, ColorSpaceId::SRGB);
                    
                    // Apply blend
                    float3 blendColor = TextureBlend_LinearLight(baseColorSRGB, sampledBaseColor);

                    // Convert back to ACEScg
                    blendColor = TransformColor(blendColor, ColorSpaceId::SRGB, ColorSpaceId::ACEScg);                    

                    // Apply factor
                    baseColor = lerp(baseColor, blendColor, factor);
                }
                break;
        }
    }
    else
    {
        baseColor *= factor;
    }
    return baseColor;
}

float3 BlendBaseColorDetailed(float3 sampledBaseColor, float3 detailColor, float detailBlendFactor, float3 baseColor, float factor, TextureBlendMode blendMode, bool useTexture)
{
    if (useTexture)
    {
        switch (blendMode)
        {
            case TextureBlendMode::Multiply:
                baseColor = factor * baseColor * sampledBaseColor;
                baseColor = lerp(baseColor, detailColor, detailBlendFactor );
                break;

            case TextureBlendMode::Lerp:
                baseColor = lerp(baseColor, sampledBaseColor, factor);
                baseColor = lerp(baseColor, detailColor, detailBlendFactor);
                break;

            case TextureBlendMode::LinearLight:
                {
                    // For more info on this blend mode: https://wiki.agscollab.com/pages/viewpage.action?pageId=15764930
                    // [GFX TODO][ATOM-3237] See if we can avoid these extra color space conversions...

                    // Since detailColor is already in ACEScg space, the Dodge and Burn effect will 
                    // be done on the combined color in this space based on the base layer color texture
                    baseColor = lerp(baseColor, detailColor, detailBlendFactor);     // ACEScg space

                    // To get blend behavior that mimics photoshop, convert to sRGB
                    sampledBaseColor = TransformColor(sampledBaseColor, ColorSpaceId::ACEScg, ColorSpaceId::SRGB);
                    float3 baseColorSRGB = TransformColor(baseColor, ColorSpaceId::ACEScg, ColorSpaceId::SRGB);

                    // Apply blend
                    float3 blendColor = TextureBlend_LinearLight(baseColorSRGB, sampledBaseColor);
                    
                    // Convert back to ACEScg
                    blendColor = TransformColor(blendColor, ColorSpaceId::SRGB, ColorSpaceId::ACEScg);
                    
                    baseColor = lerp(baseColor, blendColor, factor);
                }
                break;
        }
    }
    else
    {
        baseColor *= factor;
        baseColor = lerp( baseColor, detailColor, detailBlendFactor );
    }
    return baseColor;
}
