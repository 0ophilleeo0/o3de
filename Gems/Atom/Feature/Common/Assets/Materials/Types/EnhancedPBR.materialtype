{
    "description": "Material Type with properties used to define Enhanced PBR material shading model.",
    "propertyLayout": {
        "version": 3,
        "groups": [
            {
                "id": "baseColor",
                "displayName": "Base Color",
                "description": "Properties for configuring the surface reflected color for dielectrics or reflectance values for metals."
            },
            {
                "id": "metallic",
                "displayName": "Metallic",
                "description": "Properties for configuring whether the surface is metallic or not."
            },
            {
                "id": "anisotropy",
                "displayName": "Anisotropic Material Response",
                "description": "How much is this material response anisotropic."
            },
            {
                "id": "roughness",
                "displayName": "Roughness",
                "description": "Properties for configuring how rough the surface appears."
            },
            {
                "id": "specularF0",
                "displayName": "Specular Reflectance f0",
                "description": "The constant f0 represents the specular reflectance at normal incidence (Fresnel 0 Angle). Used to adjust reflectance of non-metal surfaces."
            },
            {
                "id": "clearCoat",
                "displayName": "Clear Coat",
                "description": "Properties for configuring gloss clear coat"
            },
            {
                "id": "normal",
                "displayName": "Normal",
                "description": "Properties related to configuring surface normal."
            },
            {
                "id": "opacity",
                "displayName": "Opacity",
                "description": "Properties for configuring the materials transparency."
            },
            {
                "id": "uv",
                "displayName": "UVs",
                "description": "Properties for configuring UV transforms."
            },
            {
                "id": "ambientOcclusion",
                "displayName": "Ambient Occlusion",
                "description": "Properties for baked AO texture."
            },
            {
                "id": "emissive",
                "displayName": "Emissive",
                "description": "Properties to add light emission, independent of other lights in the scene."
            },
            {
                "id": "parallax",
                "displayName": "Parallax Mapping",
                "description": "Properties for parallax effect produced by depthmap."
            },
            {
                "id": "subsurfaceScattering",
                "displayName": "Subsurface Scattering",
                "description": "Properties for configuring subsurface scattering effects."
            },
            {
                "id": "detailLayerGroup",
                "displayName": "Detail Layer",
                "description": "Properties for Fine Details Layer."
            },
            {
                "id": "detailUV",
                "displayName": "Detail Layer UV",
                "description": "Properties for modifying detail layer UV."
            },
            {
                // Note: this property group is used in the DiffuseGlobalIllumination pass and not by the main forward shader
                "id": "irradiance",
                "displayName": "Irradiance",
                "description": "Properties for configuring the irradiance used in global illumination."
            },
            {
                "id": "general",
                "displayName": "General",
                "description": "General settings."
            }
        ],
        "properties": {
            "general": [
                {
                    "id": "applySpecularAA",
                    "displayName": "Apply Specular AA",
                    "description": "Whether to apply specular anti-aliasing in the shader.",
                    "type": "Bool",
                    "defaultValue": false,
                    "connection": {
                        "type": "ShaderOption",
                        "id": "o_applySpecularAA"
                    }
                },
                {
                    "id": "enableShadows",
                    "displayName": "Enable Shadows",
                    "description": "Whether to use the shadow maps.",
                    "type": "Bool",
                    "defaultValue": true,
                    "connection": {
                        "type": "ShaderOption",
                        "id": "o_enableShadows"
                    }
                },
                {
                    "id": "enableDirectionalLights",
                    "displayName": "Enable Directional Lights",
                    "description": "Whether to use directional lights.",
                    "type": "Bool",
                    "defaultValue": true,
                    "connection": {
                        "type": "ShaderOption",
                        "id": "o_enableDirectionalLights"
                    }
                },
                {
                    "id": "enablePunctualLights",
                    "displayName": "Enable Punctual Lights",
                    "description": "Whether to use punctual lights.",
                    "type": "Bool",
                    "defaultValue": true,
                    "connection": {
                        "type": "ShaderOption",
                        "id": "o_enablePunctualLights"
                    }
                },
                {
                    "id": "enableAreaLights",
                    "displayName": "Enable Area Lights",
                    "description": "Whether to use area lights.",
                    "type": "Bool",
                    "defaultValue": true,
                    "connection": {
                        "type": "ShaderOption",
                        "id": "o_enableAreaLights"
                    }
                },
                {
                    "id": "enableIBL",
                    "displayName": "Enable IBL",
                    "description": "Whether to use Image Based Lighting (IBL).",
                    "type": "Bool",
                    "defaultValue": true,
                    "connection": {
                        "type": "ShaderOption",
                        "id": "o_enableIBL"
                    }
                }
            ],
            "baseColor": [
                {
                    "id": "color",
                    "displayName": "Color",
                    "description": "Color is displayed as sRGB but the values are stored as linear color.",
                    "type": "Color",
                    "defaultValue": [ 1.0, 1.0, 1.0 ],
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_baseColor"
                    }
                },
                {
                    "id": "factor",
                    "displayName": "Factor",
                    "description": "Strength factor for scaling the base color values. Zero (0.0) is black, white (1.0) is full color.",
                    "type": "Float",
                    "defaultValue": 1.0,
                    "min": 0.0,
                    "max": 1.0,
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_baseColorFactor"
                    }
                },
                {
                    "id": "textureMap",
                    "displayName": "Texture Map",
                    "description": "Base color texture map",
                    "type": "Image",
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_baseColorMap"
                    }
                },
                {
                    "id": "textureMapUv",
                    "displayName": "UV",
                    "description": "Base color texture map UV set",
                    "type": "Enum",
                    "enumIsUv": true,
                    "defaultValue": "Base",
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_baseColorMapUvIndex"
                    }
                },
                {
                    "id": "textureBlendMode",
                    "displayName": "Texture Blend Mode",
                    "description": "Selects the equation to use when combining Color, Factor, and Texture Map.",
                    "type": "Enum",
                    "enumValues": [ "Multiply", "LinearLight", "Lerp" ],
                    "defaultValue": "Multiply",
                    "connection": {
                        "type": "ShaderOption",
                        "id": "o_baseColorTextureBlendMode"
                    }
                },
                {
                    "id": "useTexture",
                    "displayName": "Use Texture",
                    "description": "Whether to use the texture map.",
                    "type": "Bool",
                    "defaultValue": true
                }
            ],
            "metallic": [
                {
                    "id": "factor",
                    "displayName": "Factor",
                    "description": "This value is linear, black is non-metal and white means raw metal.",
                    "type": "Float",
                    "defaultValue": 0.0,
                    "min": 0.0,
                    "max": 1.0,
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_metallicFactor"
                    }
                },
                {
                    "id": "textureMap",
                    "displayName": "Texture Map",
                    "description": "",
                    "type": "Image",
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_metallicMap"
                    }
                },
                {
                    "id": "textureMapUv",
                    "displayName": "UV",
                    "description": "Metallic texture map UV set",
                    "type": "Enum",
                    "enumIsUv": true,
                    "defaultValue": "Base",
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_metallicMapUvIndex"
                    }
                },
                {
                    "id": "useTexture",
                    "displayName": "Use Texture",
                    "description": "Whether to use the texture map, or just default to the Factor value.",
                    "type": "Bool",
                    "defaultValue": true
                }
            ],
            "roughness": [
                {
                    "id": "factor",
                    "displayName": "Factor",
                    "description": "Strength factor for scaling the values",
                    "type": "Float",
                    "defaultValue": 1.0,
                    "min": 0.0,
                    "max": 1.0,
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_roughnessFactor"
                    }
                },
                {
                    "id": "textureMap",
                    "displayName": "Texture Map",
                    "description": "Texture map for defining surface roughness.",
                    "type": "Image",
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_roughnessMap"
                    }
                },
                {
                    "id": "textureMapUv",
                    "displayName": "UV",
                    "description": "Roughness texture map UV set",
                    "type": "Enum",
                    "enumIsUv": true,
                    "defaultValue": "Base",
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_roughnessMapUvIndex"
                    }
                },
                {
                    // Note that "factor" is mutually exclusive with "lowerBound"/"upperBound". These are swapped by a lua functor.
                    "id": "lowerBound",
                    "displayName": "Lower Bound",
                    "description": "The roughness value that corresponds to black in the texture map.",
                    "type": "Float",
                    "defaultValue": 0.0,
                    "min": 0.0,
                    "max": 1.0,
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_roughnessLowerBound"
                    }
                },
                {
                    // Note that "factor" is mutually exclusive with "lowerBound"/"upperBound". These are swapped by a lua functor.
                    "id": "upperBound",
                    "displayName": "Upper Bound",
                    "description": "The roughness value that corresponds to white in the texture map.",
                    "type": "Float",
                    "defaultValue": 1.0,
                    "min": 0.0,
                    "max": 1.0,
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_roughnessUpperBound"
                    }
                },
                {
                    "id": "useTexture",
                    "displayName": "Use Texture",
                    "description": "Whether to use the texture map, or just default to the Factor value.",
                    "type": "Bool",
                    "defaultValue": true
                }
            ],
            "anisotropy": [
                {
                    "id": "enableAnisotropy",
                    "displayName": "Enable Anisotropy",
                    "description": "Enable anisotropic surface response for non uniform reflection along the axis",
                    "type": "Bool",
                    "defaultValue": false,
                    "connection": {
                        "type": "ShaderOption",
                        "id": "o_enableAnisotropy"
                    }
                },
                {
                    "id": "factor",
                    "displayName": "Anisotropy Factor",
                    "description": "Strength factor for the anisotropy: negative = along v, positive = along u",
                    "type": "Float",
                    "defaultValue": 0.0,
                    "min": -0.95,
                    "max": 0.95,
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_anisotropicFactor"
                    }
                },
                {
                    "id": "anisotropyAngle",
                    "displayName": "Anisotropy Angle",
                    "description": "Anisotropy direction of major reflection axis: 0 = 0 degrees, 1.0 = 180 degrees",
                    "type": "Float",
                    "defaultValue": 0.0,
                    "min": 0.0,
                    "max": 1.0,
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_anisotropicAngle"
                    }
                }
            ],
            "specularF0": [
                {
                    "id": "factor",
                    "displayName": "Factor",
                    "description": "The default IOR is 1.5, which gives you 0.04 (4% of light reflected at 0 degree angle for dielectric materials). F0 values lie in the range 0-0.08, so that is why the default F0 slider is set on 0.5.",
                    "type": "Float",
                    "defaultValue": 0.5,
                    "min": 0.0,
                    "max": 1.0,
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_specularF0Factor"
                    }
                },
                {
                    "id": "textureMap",
                    "displayName": "Texture Map",
                    "description": "Texture map for defining surface reflectance.",
                    "type": "Image",
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_specularF0Map"
                    }
                },
                {
                    "id": "textureMapUv",
                    "displayName": "UV",
                    "description": "Specular reflection texture map UV set",
                    "type": "Enum",
                    "enumIsUv": true,
                    "defaultValue": "Base",
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_specularF0MapUvIndex"
                    }
                },
                {
                    "id": "useTexture",
                    "displayName": "Use Texture",
                    "description": "Whether to use the texture map, or just default to the Factor value.",
                    "type": "Bool",
                    "defaultValue": true
                },
                {
                    "id": "enableMultiScatterCompensation",
                    "displayName": "Multiscattering Compensation",
                    "description": "Whether to enable multiple scattering compensation.",
                    "type": "Bool",
                    "connection": {
                        "type": "ShaderOption",
                        "id": "o_specularF0_enableMultiScatterCompensation"
                    }
                }
            ],
            "clearCoat": [
                {
                    "id": "enable",
                    "displayName": "Enable",
                    "description": "Enable clear coat",
                    "type": "Bool",
                    "defaultValue": false,
                    "connection": {
                        "type": "ShaderOption",
                        "id": "o_clearCoat_feature_enabled"
                    }
                },
                {
                    "id": "factor",
                    "displayName": "Factor",
                    "description": "Strength factor for scaling the percentage of effect applied",
                    "type": "Float",
                    "defaultValue": 1.0,
                    "min": 0.0,
                    "max": 1.0,
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_clearCoatFactor"
                    }
                },
                {
                    "id": "influenceMap",
                    "displayName": "    Influence Map",
                    "description": "Strength factor texture map",
                    "type": "Image",
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_clearCoatInfluenceMap"
                    }
                },
                {
                    "id": "influenceMapUv",
                    "displayName": "    UV",
                    "description": "Strength factor texture map UV set",
                    "type": "Enum",
                    "enumIsUv": true,
                    "defaultValue": "Base",
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_clearCoatInfluenceMapUvIndex"
                    }
                },
                {
                    "id": "useInfluenceMap",
                    "displayName": "    Use Texture",
                    "description": "Whether to use the texture map, or just default to the Factor value.",
                    "type": "Bool",
                    "defaultValue": true
                },
                {
                    "id": "roughness",
                    "displayName": "Roughness",
                    "description": "Clear coat layer roughness",
                    "type": "Float",
                    "defaultValue": 0.0,
                    "min": 0.0,
                    "max": 1.0,
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_clearCoatRoughness"
                    }
                },
                {
                    "id": "roughnessMap",
                    "displayName": "    Roughness Map",
                    "description": "Roughness texture map",
                    "type": "Image",
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_clearCoatRoughnessMap"
                    }
                },
                {
                    "id": "roughnessMapUv",
                    "displayName": "    UV",
                    "description": "Roughness texture map UV set",
                    "type": "Enum",
                    "enumIsUv": true,
                    "defaultValue": "Base",
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_clearCoatRoughnessMapUvIndex"
                    }
                },
                {
                    "id": "useRoughnessMap",
                    "displayName": "    Use Texture",
                    "description": "Whether to use the texture map, or just default to the roughness value.",
                    "type": "Bool",
                    "defaultValue": true
                },
                {
                    "id": "normalStrength",
                    "displayName": "Normal Strength",
                    "description": "Scales the impact of the clear coat normal map",
                    "type": "Float",
                    "defaultValue": 1.0,
                    "min": 0.0,
                    "max": 2.0,
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_clearCoatNormalStrength"
                    }
                },
                {
                    "id": "normalMap",
                    "displayName": "Normal Map",
                    "description": "Normal map for clear coat layer, as top layer material clear coat doesn't affect by base layer normal map",
                    "type": "Image",
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_clearCoatNormalMap"
                    }
                },
                {
                    "id": "normalMapUv",
                    "displayName": "UV",
                    "description": "Normal texture map UV set",
                    "type": "Enum",
                    "enumIsUv": true,
                    "defaultValue": "Base",
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_clearCoatNormalMapUvIndex"
                    }
                },
                {
                    "id": "useNormalMap",
                    "displayName": "Use Texture",
                    "description": "Whether to use the normal map",
                    "type": "Bool",
                    "defaultValue": true
                }
            ],
            "normal": [
                {
                    "id": "factor",
                    "displayName": "Factor",
                    "description": "Strength factor for scaling the values",
                    "type": "Float",
                    "defaultValue": 1.0,
                    "min": 0.0,
                    // "#softMax": [GFX TODO] replace this max with a softMax to allow a slider but have an arbitrarily high range
                    "max": 2.0,
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_normalFactor"
                    }
                },
                {
                    "id": "textureMap",
                    "displayName": "Texture Map",
                    "description": "Texture map for defining surface normal direction.",
                    "type": "Image",
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_normalMap"
                    }
                },
                {
                    "id": "textureMapUv",
                    "displayName": "UV",
                    "description": "Normal texture map UV set",
                    "type": "Enum",
                    "enumIsUv": true,
                    "defaultValue": "Base",
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_normalMapUvIndex"
                    }
                },
                {
                    "id": "useTexture",
                    "displayName": "Use Texture",
                    "description": "Whether to use the texture map, or just rely on vertex normals.",
                    "type": "Bool",
                    "defaultValue": true
                },
                {
                    "id": "flipX",
                    "displayName": "Flip X Channel",
                    "description": "Flip tangent direction for this normal map.",
                    "type": "Bool",
                    "defaultValue": false,
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_flipNormalX"
                    }
                },
                {
                    "id": "flipY",
                    "displayName": "Flip Y Channel",
                    "description": "Flip bitangent direction for this normal map.",
                    "type": "Bool",
                    "defaultValue": false,
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_flipNormalY"
                    }
                }
            ],
            "opacity": [
                {
                    "id": "mode",
                    "displayName": "Opacity Mode",
                    "description": "Opacity mode for this texture.",
                    "type": "Enum",
                    "enumValues": [ "Opaque", "Cutout", "Blended", "TintedTransparent" ],
                    "defaultValue": "Opaque",
                    "connection": {
                        "type": "ShaderOption",
                        "id": "o_opacity_mode"
                    }
                },
                {
                    "id": "alphaSource",
                    "displayName": "Alpha Source",
                    "description": "Source texture of alpha value.",
                    "type": "Enum",
                    "enumValues": [ "Packed", "Split", "None" ],
                    "defaultValue": "Packed",
                    "connection": {
                        "type": "ShaderOption",
                        "id": "o_opacity_source"
                    }
                },
                {
                    "id": "textureMap",
                    "displayName": "Texture Map",
                    "description": "Texture map for defining surface opacity.",
                    "type": "Image",
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_opacityMap"
                    }
                },
                {
                    "id": "textureMapUv",
                    "displayName": "UV",
                    "description": "Opacity texture map UV set",
                    "type": "Enum",
                    "enumIsUv": true,
                    "defaultValue": "Base",
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_opacityMapUvIndex"
                    }
                },
                {
                    "id": "factor",
                    "displayName": "Factor",
                    "description": "Factor for cutout threshold and blending",
                    "type": "Float",
                    "min": 0.0,
                    "max": 1.0,
                    "defaultValue": 0.5,
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_opacityFactor"
                    }
                },
                {
                    "id": "doubleSided",
                    "displayName": "Double-sided",
                    "description": "Whether to render back-faces or just front-faces.",
                    "type": "Bool"
                }
            ],
            "uv": [
                {
                    "id": "center",
                    "displayName": "Center",
                    "description": "Center point for scaling and rotation transformations.",
                    "type": "vector2",
                    "vectorLabels": [ "U", "V" ],
                    "defaultValue": [ 0.0, 0.0 ]
                },
                {
                    "id": "tileU",
                    "displayName": "Tile U",
                    "description": "Scales texture coordinates in U.",
                    "type": "float",
                    "defaultValue": 1.0,
                    "step": 0.1
                },
                {
                    "id": "tileV",
                    "displayName": "Tile V",
                    "description": "Scales texture coordinates in V.",
                    "type": "float",
                    "defaultValue": 1.0,
                    "step": 0.1
                },
                {
                    "id": "offsetU",
                    "displayName": "Offset U",
                    "description": "Offsets texture coordinates in the U direction.",
                    "type": "float",
                    "defaultValue": 0.0,
                    "min": -1.0,
                    "max": 1.0
                },
                {
                    "id": "offsetV",
                    "displayName": "Offset V",
                    "description": "Offsets texture coordinates in the V direction.",
                    "type": "float",
                    "defaultValue": 0.0,
                    "min": -1.0,
                    "max": 1.0
                },
                {
                    "id": "rotateDegrees",
                    "displayName": "Rotate",
                    "description": "Rotates the texture coordinates (degrees).",
                    "type": "float",
                    "defaultValue": 0.0,
                    "min": -180.0,
                    "max": 180.0,
                    "step": 1.0
                },
                {
                    "id": "scale",
                    "displayName": "Scale",
                    "description": "Scales texture coordinates in both U and V.",
                    "type": "float",
                    "defaultValue": 1.0,
                    "step": 0.1
                }
            ],
            "ambientOcclusion": [
                {
                    "id": "enable",
                    "displayName": "Enable",
                    "description": "Whether to enable the ambient occlusion feature.",
                    "type": "Bool",
                    "defaultValue": false
                },
                {
                    "id": "factor",
                    "displayName": "Factor",
                    "description": "Strength factor for scaling the values",
                    "type": "Float",
                    "defaultValue": 1.0,
                    "min": 0.0,
                    "max": 2.0,
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_ambientOcclusionFactor"
                    }
                },
                {
                    "id": "textureMap",
                    "displayName": "Texture Map",
                    "description": "Texture map for defining ambient occlusion area.",
                    "type": "Image",
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_ambientOcclusionMap"
                    }
                },
                {
                    "id": "textureMapUv",
                    "displayName": "UV",
                    "description": "Ambient occlusion texture map UV set",
                    "type": "Enum",
                    "enumValues": [ "UV0", "UV1" ],
                    "defaultValue": "UV0",
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_ambientOcclusionMapUvIndex"
                    }
                }
            ],
            "emissive": [
                {
                    "id": "enable",
                    "displayName": "Enable",
                    "description": "Enable the emissive group",
                    "type": "Bool",
                    "defaultValue": false,
                    "connection": {
                        "type": "ShaderOption",
                        "id": "o_emissiveEnabled"
                    }
                },
                {
                    "id": "unit",
                    "displayName": "Units",
                    "description": "The photometric units of the Intensity property.",
                    "type": "Enum",
                    "enumValues": [ "Ev100" ],
                    "defaultValue": "Ev100"
                },
                {
                    "id": "color",
                    "displayName": "Color",
                    "description": "Color is displayed as sRGB but the values are stored as linear color.",
                    "type": "Color",
                    "defaultValue": [ 1.0, 1.0, 1.0 ],
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_emissiveColor"
                    }
                },
                {
                    "id": "intensity",
                    "displayName": "Intensity",
                    "description": "The amount of energy emitted.",
                    "type": "Float",
                    "defaultValue": 4,
                    "min": -10,
                    "max": 20,
                    "softMin": -6,
                    "softMax": 16
                },
                {
                    "id": "textureMap",
                    "displayName": "Texture Map",
                    "description": "Texture map for defining emissive area.",
                    "type": "Image",
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_emissiveMap"
                    }
                },
                {
                    "id": "textureMapUv",
                    "displayName": "UV",
                    "description": "Emissive texture map UV set",
                    "type": "Enum",
                    "enumValues": [ "UV0", "UV1" ],
                    "defaultValue": "UV0",
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_emissiveMapUvIndex"
                    }
                },
                {
                    "id": "useTexture",
                    "displayName": "Use Texture",
                    "description": "Whether to use the texture map.",
                    "type": "Bool",
                    "defaultValue": true
                }
            ],
            "parallax": [
                {
                    "id": "enable",
                    "displayName": "Enable",
                    "description": "Whether to enable the parallax feature.",
                    "type": "Bool",
                    "defaultValue": false
                },
                {
                    "id": "factor",
                    "displayName": "Factor",
                    "description": "Strength factor for scaling the depth values",
                    "type": "Float",
                    "defaultValue": 0.0,
                    "min": 0.0,
                    "softMax": 0.1,
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_depthFactor"
                    }
                },
                {
                    "id": "textureMap",
                    "displayName": "Texture Map",
                    "description": "Depthmap to create parallax effect.",
                    "type": "Image",
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_depthMap"
                    }
                },
                {
                    "id": "textureMapUv",
                    "displayName": "UV",
                    "description": "Depth texture map UV set",
                    "type": "Enum",
                    "enumValues": [ "UV0", "UV1" ],
                    "defaultValue": "UV0",
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_parallaxUvIndex"
                    }
                },
                {
                    "id": "invert",
                    "displayName": "Invert",
                    "description": "Invert to depthmap if the texture is heightmap",
                    "type": "Bool",
                    "defaultValue": true,
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_depthInverted"
                    }
                },
                {
                    "id": "algorithm",
                    "displayName": "Algorithm",
                    "description": "Select the algorithm to use for parallax mapping.",
                    "type": "Enum",
                    "enumValues": [ "Basic", "Steep", "POM", "Relief", "ContactRefinement" ],
                    "defaultValue": "Basic",
                    "connection": {
                        "type": "ShaderOption",
                        "id": "o_parallax_algorithm"
                    }
                },
                {
                    "id": "quality",
                    "displayName": "Quality",
                    "description": "Quality of parallax mapping.",
                    "type": "Enum",
                    "enumValues": [ "Low", "Medium", "High", "Ultra" ],
                    "defaultValue": "Low",
                    "connection": {
                        "type": "ShaderOption",
                        "id": "o_parallax_quality"
                    }
                },
                {
                    "id": "pdo",
                    "displayName": "Pixel Depth Offset",
                    "description": "Whether to enable the pixel depth offset feature.",
                    "type": "Bool",
                    "defaultValue": false,
                    "connection": {
                        "type": "ShaderOption",
                        "id": "o_parallax_enablePixelDepthOffset"
                    }
                }
            ],
            "subsurfaceScattering": [
                {
                    "id": "enableSubsurfaceScattering",
                    "displayName": "Enable Subsurface Scattering",
                    "description": "Enable subsurface scattering feature, this will disable metallic and parallax mapping property due to incompatibility",
                    "type": "Bool",
                    "defaultValue": false,
                    "connection": {
                        "type": "ShaderOption",
                        "id": "o_enableSubsurfaceScattering"
                    }
                },
                {
                    "id": "subsurfaceScatterFactor",
                    "displayName": "    Factor",
                    "description": "Strength factor for scaling percentage of subsurface scattering effect applied",
                    "type": "float",
                    "defaultValue": 0.0,
                    "min": 0.0,
                    "max": 1.0,
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_subsurfaceScatteringFactor"
                    }
                },
                {
                    "id": "influenceMap",
                    "displayName": "    Influence Map",
                    "description": "Use texture map to control the strength of subsurface scattering",
                    "type": "Image",
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_subsurfaceScatteringInfluenceMap"
                    }
                },
                {
                    "id": "influenceMapUv",
                    "displayName": "    UV",
                    "description": "Influence map UV set",
                    "type": "Enum",
                    "enumValues": [ "UV0", "UV1" ],
                    "defaultValue": "UV0",
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_subsurfaceScatteringInfluenceMapUvIndex"
                    }
                },
                {
                    "id": "useInfluenceMap",
                    "displayName": "    Use Influence Map",
                    "description": "Whether to use the texture map as influence mask.",
                    "type": "Bool",
                    "defaultValue": true
                },
                {
                    "id": "scatterColor",
                    "displayName": "    Scatter color",
                    "description": "Color of volume light traveled through",
                    "type": "Color",
                    "defaultValue": [ 1.0, 0.27, 0.13 ]
                },
                {
                    "id": "scatterDistance",
                    "displayName": "    Scatter distance",
                    "description": "How far light traveled inside the volume",
                    "type": "float",
                    "defaultValue": 8,
                    "min": 0.0,
                    "softMax": 20.0
                },
                {
                    "id": "quality",
                    "displayName": "    Quality",
                    "description": "How much percent of sample will be used for each pixel, more samples improve quality and reduce artifacts, especially when the scatter distance is relatively large, but slow down computation time, 1.0 = full set 200 samples per pixel",
                    "type": "float",
                    "defaultValue": 0.4,
                    "min": 0.2,
                    "max": 1.0,
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_subsurfaceScatteringQuality"
                    }
                },
                {
                    "id": "enableTransmission",
                    "displayName": "Enable Transmission",
                    "description": "Enable transmission feature",
                    "type": "Bool",
                    "defaultValue": false
                },
                {
                    "id": "thickness",
                    "displayName": "    Thickness",
                    "description": "Normalized global thickness, the maxima between this value (multiplied by thickness map if enabled) and thickness from shadow map (if applicable) will be used as final thickness of pixel",
                    "type": "float",
                    "defaultValue": 0.5,
                    "min": 0.0,
                    "max": 1.0
                },
                {
                    "id": "thicknessMap",
                    "displayName": "    Thickness Map",
                    "description": "Use a greyscale texture for per pixel thickness",
                    "type": "Image",
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_transmissionThicknessMap"
                    }
                },
                {
                    "id": "thicknessMapUv",
                    "displayName": "    UV",
                    "description": "Thickness map UV set",
                    "type": "Enum",
                    "enumValues": [ "UV0", "UV1" ],
                    "defaultValue": "UV0",
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_transmissionThicknessMapUvIndex"
                    }
                },
                {
                    "id": "useThicknessMap",
                    "displayName": "    Use Thickness Map",
                    "description": "Whether to use the thickness map",
                    "type": "Bool",
                    "defaultValue": true
                },
                {
                    "id": "transmissionTint",
                    "displayName": "    Transmission Tint",
                    "description": "Color of the volume light travelling through",
                    "type": "Color",
                    "defaultValue": [ 1.0, 0.8, 0.6 ]
                },
                {
                    "id": "transmissionMode",
                    "displayName": "    Mode",
                    "description": "Algorithm used for calculating transmission",
                    "type": "Enum",
                    "enumValues": [ "None", "ThickObject", "ThinObject" ],
                    "defaultValue": "None",
                    "connection": {
                        "type": "ShaderOption",
                        "id": "o_transmission_mode"
                    }
                },
                {
                    "id": "transmissionPower",
                    "displayName": "    Power",
                    "description": "How much transmitted light scatter radially ",
                    "type": "float",
                    "defaultValue": 6.0,
                    "min": 0.0,
                    "softMax": 20.0
                },
                {
                    "id": "transmissionDistortion",
                    "displayName": "    Distortion",
                    "description": "How much light direction distorted towards surface normal",
                    "type": "float",
                    "defaultValue": 0.1,
                    "min": 0.0,
                    "max": 1.0
                },
                {
                    "id": "transmissionAttenuation",
                    "displayName": "    Attenuation",
                    "description": "How fast transmitted light fade with thickness",
                    "type": "float",
                    "defaultValue": 4.0,
                    "min": 0.0,
                    "softMax": 20.0
                },
                {
                    "id": "transmissionScale",
                    "displayName": "    Scale",
                    "description": "Strength of transmission",
                    "type": "float",
                    "defaultValue": 3.0,
                    "min": 0.0,
                    "softMax": 20.0
                }
            ],
            "detailLayerGroup": [
                {
                    "id": "enableDetailLayer",
                    "displayName": "Enable Detail Layer",
                    "description": "Enable detail layer for fine details and scratches",
                    "type": "Bool",
                    "defaultValue": false,
                    "connection": {
                        "type": "ShaderOption",
                        "id": "o_enableDetailLayer"
                    }
                },
                {
                    "id": "enableDetailMaskTexture",
                    "displayName": "Enable Detail Mask Texture",
                    "description": "Enable detail mask texture for blending the layer textures affect",
                    "type": "Bool",
                    "defaultValue": false,
                    "connection": {
                        "type": "ShaderOption",
                        "id": "o_maskDetail_useTexture"
                    }
                },
                {
                    "id": "blendDetailMask",
                    "displayName": "Detail Blend Mask",
                    "description": "Detailed blend mask for application of the detail maps",
                    "type": "Image",
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_detailBlendMask"
                    }
                },
                {
                    "id": "baseColorDetail",
                    "displayName": "Detail Base Color",
                    "description": "Color is displayed as sRGB but the values are stored as linear color.",
                    "type": "Color",
                    "defaultValue": [ 1.0, 1.0, 1.0 ],
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_baseColorDetail"
                    }
                },
                {
                    "id": "enableDetailBaseColorTexture",
                    "displayName": "Enable Detail Base Color Texture",
                    "description": "Enable detail base color to override parts of the base layer color",
                    "type": "Bool",
                    "defaultValue": false,
                    "connection": {
                        "type": "ShaderOption",
                        "id": "o_baseColorDetail_useTexture"
                    }
                },
                {
                    "id": "baseColorDetailBlend",
                    "displayName": "Base Color Detail Blend with Main",
                    "description": "Blend between Detail Base Color and Main Base Color",
                    "type": "Float",
                    "defaultValue": 0.0,
                    "min": 0.0,
                    "max": 2.0,
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_baseColorDetailBlend"
                    }
                },
                {
                    "id": "baseColorDetailMap",
                    "displayName": "Base Color Detail Map",
                    "description": "Detailed Base Color Texture map",
                    "type": "Image",
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_baseColorDetailMap"
                    }
                },
                {
                    "id": "enableDetaiNormalTexture",
                    "displayName": "Enable Detail Normal Texture",
                    "description": "Enable detail normal texture to be used for fine detail normal such as scratches and small dents",
                    "type": "Bool",
                    "defaultValue": false,
                    "connection": {
                        "type": "ShaderOption",
                        "id": "o_normalDetail_useTexture"
                    }
                },
                {
                    "id": "normalDetailStrength",
                    "displayName": "Normal Detail Strength",
                    "description": "Strength factor for scaling the Detail Normal",
                    "type": "Float",
                    "defaultValue": 1.0,
                    "min": 0.0,
                    "max": 2.0,
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_normalDetailStrength"
                    }
                },
                {
                    "id": "normalDetailMap",
                    "displayName": "Normal Detail Texture Map",
                    "description": "Detailed Normal Texture map",
                    "type": "Image",
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_normalDetailMap"
                    }
                },
                {
                    "id": "normalDetailFlipX",
                    "displayName": "Flip Detail X Channel",
                    "description": "Flip Detail tangent direction for this normal map.",
                    "type": "Bool",
                    "defaultValue": false,
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_normalDetailflipX"
                    }
                },
                {
                    "id": "normalDetailFlipY",
                    "displayName": "Flip Detail Y Channel",
                    "description": "Flip Detail bitangent direction for this normal map.",
                    "type": "Bool",
                    "defaultValue": false,
                    "connection": {
                        "type": "ShaderInput",
                        "id": "m_normalDetailflipY"
                    }
                }
            ],
            "detailUV": [
                {
                    "id": "center",
                    "displayName": "Center",
                    "description": "Center point for scaling and rotation transformations.",
                    "type": "vector2",
                    "vectorLabels": [ "U", "V" ],
                    "defaultValue": [ 0.0, 0.0 ]
                },
                {
                    "id": "tileU",
                    "displayName": "Tile U",
                    "description": "Scales texture coordinates in V.",
                    "type": "float",
                    "defaultValue": 1.0,
                    "step": 0.1
                },
                {
                    "id": "tileV",
                    "displayName": "Tile V",
                    "description": "Scales texture coordinates in V.",
                    "type": "float",
                    "defaultValue": 1.0,
                    "step": 0.1
                },
                {
                    "id": "offsetU",
                    "displayName": "Offset U",
                    "description": "Offsets texture coordinates in the U direction.",
                    "type": "float",
                    "defaultValue": 0.0,
                    "min": -1.0,
                    "max": 1.0
                },
                {
                    "id": "offsetV",
                    "displayName": "Offset V",
                    "description": "Offsets texture coordinates in the V direction.",
                    "type": "float",
                    "defaultValue": 0.0,
                    "min": -1.0,
                    "max": 1.0
                },
                {
                    "id": "rotateDegrees",
                    "displayName": "Rotate",
                    "description": "Rotates the texture coordinates (degrees).",
                    "type": "float",
                    "defaultValue": 0.0,
                    "min": -180.0,
                    "max": 180.0,
                    "step": 1.0
                },
                {
                    "id": "scale",
                    "displayName": "Scale",
                    "description": "Scales texture coordinates in both U and V.",
                    "type": "float",
                    "defaultValue": 1.0,
                    "step": 0.1
                }
            ],
            "irradiance": [
                // Note: this property group is used in the DiffuseGlobalIllumination pass and not by the main forward shader
                {
                    "id": "color",
                    "displayName": "Color",
                    "description": "Color is displayed as sRGB but the values are stored as linear color.",
                    "type": "Color",
                    "defaultValue": [ 1.0, 1.0, 1.0 ]
                },
                {
                    "id": "factor",
                    "displayName": "Factor",
                    "description": "Strength factor for scaling the irradiance color values. Zero (0.0) is black, white (1.0) is full color.",
                    "type": "Float",
                    "defaultValue": 1.0,
                    "min": 0.0,
                    "max": 1.0
                }
            ]
        }
    },
    "shaders": [
        {
            "file": "./EnhancedPBR_ForwardPass.shader",
            "tag": "ForwardPass"
        },
        {
            "file": "./EnhancedPBR_ForwardPass_EDS.shader",
            "tag": "ForwardPass_EDS"
        },
        {
            "file": "Shaders/Shadow/Shadowmap.shader",
            "tag": "Shadowmap"
        },
        {
            "file": "./EnhancedPBR_Shadowmap_WithPS.shader",
            "tag": "Shadowmap_WithPS"
        },
        {
            "file": "Shaders/Depth/DepthPass.shader",
            "tag": "DepthPass"
        },
        {
            "file": "./EnhancedPBR_DepthPass_WithPS.shader",
            "tag": "DepthPass_WithPS"
        },
        // [GFX TODO][ATOM-4726] Use an "isSkinnedMesh" external material property and a functor that enables/disables the appropriate motion-vector shader
        {
            "file": "Shaders/MotionVector/StaticMeshMotionVector.shader",
            "tag": "StaticMeshMotionVector"
        },
        {
            "file": "Shaders/MotionVector/SkinnedMeshMotionVector.shader",
            "tag": "SkinnedMeshMotionVector"
        },
        // Used by the light culling system to produce accurate depth bounds for this object when it uses blended transparency
        {
            "file": "Shaders/Depth/DepthPassTransparentMin.shader",
            "tag": "DepthPassTransparentMin"
        },
        {
            "file": "Shaders/Depth/DepthPassTransparentMax.shader",
            "tag": "DepthPassTransparentMax"
        }
    ],
    "functors": [
        {
            // Maps 2D scale, offset, and rotate properties into a float3x3 transform matrix.
            "type": "Transform2D",
            "args": {
                "transformOrder": [ "Rotate", "Translate", "Scale" ],
                "centerProperty": "uv.center",
                "scaleProperty": "uv.scale",
                "scaleXProperty": "uv.tileU",
                "scaleYProperty": "uv.tileV",
                "translateXProperty": "uv.offsetU",
                "translateYProperty": "uv.offsetV",
                "rotateDegreesProperty": "uv.rotateDegrees",
                "float3x3ShaderInput": "m_uvMatrix",
                "float3x3InverseShaderInput": "m_uvMatrixInverse"
            }
        },
        {
            // Maps 2D scale, offset, and rotate properties into a float3x3 transform matrix.
            "type": "Transform2D",
            "args": {
                "transformOrder": [ "Rotate", "Translate", "Scale" ],
                "centerProperty": "detailUV.center",
                "scaleProperty": "detailUV.scale",
                "scaleXProperty": "detailUV.tileU",
                "scaleYProperty": "detailUV.tileV",
                "translateXProperty": "detailUV.offsetU",
                "translateYProperty": "detailUV.offsetV",
                "rotateDegreesProperty": "detailUV.rotateDegrees",
                "float3x3ShaderInput": "m_detailUVMatrix",
                "float3x3InverseShaderInput": "m_detailUVMatrixInverse"
            }
        },
        {
            // Convert emissive unit.
            "type": "ConvertEmissiveUnit",
            "args": {
                "intensityProperty": "emissive.intensity",
                "lightUnitProperty": "emissive.unit",
                "shaderInput": "m_emissiveIntensity",
                "ev100Index": 0,
                "nitIndex": 1,
                "ev100MinMax": [ -10, 20 ],
                "nitMinMax": [ 0.001, 100000.0 ]
            }
        },
        {
            // Enable/Disable shader based on different option.
            "type": "ShaderEnable",
            "args": {
                "opacityMode": "opacity.mode",
                "parallaxEnable": "parallax.enable",
                "parallaxPdoEnable": "parallax.pdo",
                "pbrShaderNoEdsIndex": 0,
                "pbrShaderWithEdsIndex": 1,
                "shadowShaderNoPSIndex": 2,
                "shadowShaderWithPSIndex": 3,
                "depthShaderNoPSIndex": 4,
                "depthShaderWithPSIndex": 5,
                "depthShaderTransparentMin": 8,
                "depthShaderTransparentMax": 9
            }
        },
        {
            // Preprocess & build parameter set for subsurface scattering and translucency
            "type": "HandleSubsurfaceScatteringParameters",
            "args": {
                "mode": "subsurfaceScattering.transmissionMode",
                "scale": "subsurfaceScattering.transmissionScale",
                "power": "subsurfaceScattering.transmissionPower",
                "distortion": "subsurfaceScattering.transmissionDistortion",
                "attenuation": "subsurfaceScattering.transmissionAttenuation",
                "tintColor": "subsurfaceScattering.transmissionTint",
                "thickness": "subsurfaceScattering.thickness",
                "enabled": "subsurfaceScattering.enableSubsurfaceScattering",
                "scatterDistanceColor": "subsurfaceScattering.scatterColor",
                "scatterDistanceIntensity": "subsurfaceScattering.scatterDistance",
                "scatterDistanceShaderInput": "m_scatterDistance",
                "parametersShaderInput": "m_transmissionParams",
                "tintThickenssShaderInput": "m_transmissionTintThickness"
            }
        },
        { 
            // Reads material properties to determine whether a specific texture map should be sampled at runtime, and sets a shader option accordingly.
            // @param textureProperty    - which material property contains the texture asset reference (or maybe null)
            // @param useTextureProperty - a boolean flag that toggles whether the texture should be sampled (if it's not null)
            // @param shaderTags         - which shader in the 'shaders' list above is configured by this functor
            // @param shaderOption       - the name of a shader option in the AZSL file that controls sampling of this texture
            "type": "UseTexture",
            "args": {
                "textureProperty": "baseColor.textureMap",
                "dependentProperties": ["baseColor.textureMapUv"],
                "useTextureProperty": "baseColor.useTexture",
                "shaderTags": [ 
                    "ForwardPass",
                    "ForwardPass_EDS"
                ],
                "shaderOption": "o_baseColor_useTexture"
            }
        },
        {
            // See the comment above for details.
            "type": "UseTexture",
            "args": {
                "textureProperty": "metallic.textureMap",
                "dependentProperties": ["metallic.textureMapUv"],
                "useTextureProperty": "metallic.useTexture",
                "shaderTags": [ 
                    "ForwardPass",
                    "ForwardPass_EDS"
                ],
                "shaderOption": "o_metallic_useTexture"
            }
        },
        {
            // See the comment above for details.
            "type": "UseTexture",
            "args": {
                "textureProperty": "roughness.textureMap",
                "dependentProperties": ["roughness.textureMapUv"],
                "useTextureProperty": "roughness.useTexture",
                "shaderTags": [ 
                    "ForwardPass",
                    "ForwardPass_EDS"
                ],
                "shaderOption": "o_roughness_useTexture"
            }
        },
        {
            // See the comment above for details.
            "type": "UseTexture",
            "args": {
                "textureProperty": "specularF0.textureMap",
                "dependentProperties": ["specularF0.textureMapUv"],
                "useTextureProperty": "specularF0.useTexture",
                "shaderTags": [ 
                    "ForwardPass",
                    "ForwardPass_EDS"
                ],
                "shaderOption": "o_specularF0_useTexture"
            }
        },
        {
            // See the comment above for details.
            "type": "UseTexture",
            "args": {
                "textureProperty": "clearCoat.influenceMap",
                "dependentProperties": ["clearCoat.influenceMapUv"],
                "useTextureProperty": "clearCoat.useInfluenceMap",
                "shaderTags": [ 
                    "ForwardPass",
                    "ForwardPass_EDS"
                ],
                "shaderOption": "o_clearCoat_factor_useTexture"
            }
        },
        {
            // See the comment above for details.
            "type": "UseTexture",
            "args": {
                "textureProperty": "clearCoat.roughnessMap",
                "dependentProperties": ["clearCoat.roughnessMapUv"],
                "useTextureProperty": "clearCoat.useRoughnessMap",
                "shaderTags": [ 
                    "ForwardPass",
                    "ForwardPass_EDS"
                ],
                "shaderOption": "o_clearCoat_roughness_useTexture"
            }
        },
        {
            // See the comment above for details.
            "type": "UseTexture",
            "args": {
                "textureProperty": "clearCoat.normalMap",
                "dependentProperties": ["clearCoat.normalMapUv"],
                "useTextureProperty": "clearCoat.useNormalMap",
                "shaderTags": [ 
                    "ForwardPass",
                    "ForwardPass_EDS"
                ],
                "shaderOption": "o_clearCoat_normal_useTexture"
            }
        },
        {
            // See the comment above for details.
            "type": "UseTexture",
            "args": {
                "textureProperty": "normal.textureMap",
                "dependentProperties": ["normal.textureMapUv"],
                "useTextureProperty": "normal.useTexture",
                "shaderTags": [ 
                    "ForwardPass",
                    "ForwardPass_EDS"
                ],
                "shaderOption": "o_normal_useTexture"
            }
        },
        {
            // See the comment above for details.
            "type": "UseTexture",
            "args": {
                "textureProperty": "ambientOcclusion.textureMap",
                "dependentProperties": ["ambientOcclusion.textureMapUv"],
                "useTextureProperty": "ambientOcclusion.enable",
                "shaderTags": [ 
                    "ForwardPass",
                    "ForwardPass_EDS"
                ],
                "shaderOption": "o_ambientOcclusion_useTexture"
            }
        },
        {
            // See the comment above for details.
            "type": "UseTexture",
            "args": {
                "textureProperty": "emissive.textureMap",
                "dependentProperties": ["emissive.textureMapUv"],
                "useTextureProperty": "emissive.useTexture",
                "shaderTags": [ 
                    "ForwardPass",
                    "ForwardPass_EDS"
                ],
                "shaderOption": "o_emissive_useTexture"
            }
        },
        {
            // See the comment above for details.
            "type": "UseTexture",
            "args": {
                "textureProperty": "parallax.textureMap",
                "dependentProperties": ["parallax.textureMapUv"],
                "useTextureProperty": "parallax.enable",
                "shaderTags": [ 
                    "ForwardPass",
                    "ForwardPass_EDS",
                    "Shadowmap_WithPS",
                    "DepthPass_WithPS"
                ],
                "shaderOption": "o_parallax_feature_enabled"
            }
        },
        {
            // See the comment above for details.
            "type": "UseTexture",
            "args": {
                "textureProperty": "subsurfaceScattering.influenceMap",
                "dependentProperties": ["subsurfaceScattering.influenceMapUv"],
                "useTextureProperty": "subsurfaceScattering.useInfluenceMap",
                "shaderTags": [ 
                    "ForwardPass",
                    "ForwardPass_EDS"
                ],
                "shaderOption": "o_subsurfaceScattering_useTexture"
            }
        },
        {
            // See the comment above for details.
            "type": "UseTexture",
            "args": {
                "textureProperty": "subsurfaceScattering.thicknessMap",
                "dependentProperties": ["subsurfaceScattering.thicknessMapUv"],
                "useTextureProperty": "subsurfaceScattering.useThicknessMap",
                "shaderTags": [ 
                    "ForwardPass",
                    "ForwardPass_EDS"
                ],
                "shaderOption": "o_transmission_useTexture"
            }
        },
        {
            // Controls visibility for properties in the editor.
            // @param actions            - a list of actions that are executed in order. visibility will be set when triggerProperty hits the triggerValue.
            // @param affectedProperties - the properties that are affected by actions.
            "type": "UpdatePropertyVisibility",
            "args": {
                "actions": [
                    {
                        "triggerProperty": "ambientOcclusion.enable",
                        "triggerValue": true,
                        "visibility": "Enabled"
                    },
                    {
                        "triggerProperty": "ambientOcclusion.enable",
                        "triggerValue": false,
                        "visibility": "Disabled"
                    }
                ],
                "affectedProperties": [
                    "ambientOcclusion.factor",
                    "ambientOcclusion.textureMap",
                    "ambientOcclusion.textureMapUv"
                ]
            }
        },
        {
            // Controls visibility for properties in the editor.
            // @param actions            - a list of actions that are executed in order. visibility will be set when triggerProperty hits the triggerValue.
            // @param affectedProperties - the properties that are affected by actions.
            "type": "UpdatePropertyVisibility",
            "args": {
                "actions": [
                    {
                        "triggerProperty": "emissive.enable",
                        "triggerValue": true,
                        "visibility": "Enabled"
                    },
                    {
                        "triggerProperty": "emissive.enable",
                        "triggerValue": false,
                        "visibility": "Hidden"
                    }
                ],
                "affectedProperties": [
                    "emissive.color",
                    "emissive.intensity",
                    "emissive.useTexture",
                    "emissive.unit"
                ]
            }
        },
        {
            // Controls visibility for properties in the editor.
            // @param actions            - a list of actions that are executed in order. visibility will be set when triggerProperty hits the triggerValue.
            // @param affectedProperties - the properties that are affected by actions.
            "type": "UpdatePropertyVisibility",
            "args": {
                "actions": [
                    {
                        "triggerProperty": "emissive.useTexture",
                        "triggerValue": true,
                        "visibility": "Enabled"
                    },
                    {
                        "triggerProperty": "emissive.useTexture",
                        "triggerValue": false,
                        "visibility": "Disabled"
                    },
                    {
                        "triggerProperty": "emissive.enable",
                        "triggerValue": false,
                        "visibility": "Hidden"
                    }
                ],
                "affectedProperties": [
                    "emissive.textureMap",
                    "emissive.textureMapUv"
                ]
            }
        },
        {
            // Controls visibility for properties in the editor.
            // @param actions            - a list of actions that are executed in order. visibility will be set when triggerProperty hits the triggerValue.
            // @param affectedProperties - the properties that are affected by actions.
            "type": "UpdatePropertyVisibility",
            "args": {
                "actions": [
                    {
                        "triggerProperty": "parallax.enable",
                        "triggerValue": true,
                        "visibility": "Enabled"
                    },
                    {
                        "triggerProperty": "parallax.enable",
                        "triggerValue": false,
                        "visibility": "Hidden"
                    }
                ],
                "affectedProperties": [
                    "parallax.factor",
                    "parallax.textureMap",
                    "parallax.invert",
                    "parallax.algorithm",
                    "parallax.quality",
                    "parallax.pdo"
                ]
            }
        },
        {
            "type": "UpdatePropertyVisibility",
            "args": {
                "actions": [
                    {
                        "triggerProperty": "clearCoat.useInfluenceMap",
                        "triggerValue": true,
                        "visibility": "Enabled"
                    },
                    {
                        "triggerProperty": "clearCoat.useInfluenceMap",
                        "triggerValue": false,
                        "visibility": "Disabled"
                    },
                    {
                        "triggerProperty": "clearCoat.enable",
                        "triggerValue": false,
                        "visibility": "Hidden"
                    }
                ],
                "affectedProperties": [
                    "clearCoat.influenceMap",
                    "clearCoat.influenceMapUv"
                ]
            }
        },
        {
            "type": "UpdatePropertyVisibility",
            "args": {
                "actions": [
                    {
                        "triggerProperty": "clearCoat.useRoughnessMap",
                        "triggerValue": true,
                        "visibility": "Enabled"
                    },
                    {
                        "triggerProperty": "clearCoat.useRoughnessMap",
                        "triggerValue": false,
                        "visibility": "Disabled"
                    },
                    {
                        "triggerProperty": "clearCoat.enable",
                        "triggerValue": false,
                        "visibility": "Hidden"
                    }
                ],
                "affectedProperties": [
                    "clearCoat.roughnessMap",
                    "clearCoat.roughnessMapUv"
                ]
            }
        },
        {
            "type": "UpdatePropertyVisibility",
            "args": {
                "actions": [
                    {
                        "triggerProperty": "clearCoat.useNormalMap",
                        "triggerValue": true,
                        "visibility": "Enabled"
                    },
                    {
                        "triggerProperty": "clearCoat.useNormalMap",
                        "triggerValue": false,
                        "visibility": "Disabled"
                    },
                    {
                        "triggerProperty": "clearCoat.enable",
                        "triggerValue": false,
                        "visibility": "Hidden"
                    }
                ],
                "affectedProperties": [
                    "clearCoat.normalMap",
                    "clearCoat.normalMapUv"
                ]
            }

        },
        {
            "type": "UpdatePropertyVisibility",
            "args": {
                "actions": [
                    {
                        "triggerProperty": "subsurfaceScattering.useInfluenceMap",
                        "triggerValue": true,
                        "visibility": "Enabled"
                    },
                    {
                        "triggerProperty": "subsurfaceScattering.useInfluenceMap",
                        "triggerValue": false,
                        "visibility": "Disabled"
                    },
                    {
                        "triggerProperty": "subsurfaceScattering.enableSubsurfaceScattering",
                        "triggerValue": false,
                        "visibility": "Hidden"
                    }
                ],
                "affectedProperties": [
                    "subsurfaceScattering.influenceMap",
                    "subsurfaceScattering.influenceMapUv"
                ]
            }
        },
        {
            "type": "UpdatePropertyVisibility",
            "args": {
                "actions": [
                    {
                        "triggerProperty": "subsurfaceScattering.useThicknessMap",
                        "triggerValue": true,
                        "visibility": "Enabled"
                    },
                    {
                        "triggerProperty": "subsurfaceScattering.useThicknessMap",
                        "triggerValue": false,
                        "visibility": "Disabled"
                    },
                    {
                        "triggerProperty": "subsurfaceScattering.enableTransmission",
                        "triggerValue": false,
                        "visibility": "Hidden"
                    }
                ],
                "affectedProperties": [
                    "subsurfaceScattering.thicknessMap",
                    "subsurfaceScattering.thicknessMapUv"
                ]
            }
        },
        {
            "type": "UpdatePropertyVisibility",
            "args": {
                "actions": [
                    {
                        "triggerProperty": "clearCoat.enable",
                        "triggerValue": true,
                        "visibility": "Enabled"
                    },
                    {
                        "triggerProperty": "clearCoat.enable",
                        "triggerValue": false,
                        "visibility": "Hidden"
                    }
                ],
                "affectedProperties": [
                    "clearCoat.factor",
                    "clearCoat.useInfluenceMap",
                    "clearCoat.roughness",
                    "clearCoat.useRoughnessMap",
                    "clearCoat.useNormalMap"
                ]
            }
        },
        {
            "type": "UpdatePropertyVisibility",
            "args": {
                "actions": [
                    {
                        "triggerProperty": "subsurfaceScattering.transmissionMode",
                        "triggerValue": "ThickObject",
                        "visibility": "Enabled"
                    },
                    {
                        "triggerProperty": "subsurfaceScattering.transmissionMode",
                        "triggerValue": "None",
                        "visibility": "Hidden"
                    },
                    {
                        "triggerProperty": "subsurfaceScattering.transmissionMode",
                        "triggerValue": "ThinObject",
                        "visibility": "Hidden"
                    },
                    {
                        "triggerProperty": "subsurfaceScattering.enableTransmission",
                        "triggerValue": false,
                        "visibility": "Hidden"
                    }
                ],
                "affectedProperties": [
                    "subsurfaceScattering.transmissionPower",
                    "subsurfaceScattering.transmissionDistortion",
                    "subsurfaceScattering.transmissionAttenuation"
                ]
            }
        },
        {
            "type": "UpdatePropertyVisibility",
            "args": {
                "actions": [
                    {
                        "triggerProperty": "subsurfaceScattering.enableSubsurfaceScattering",
                        "triggerValue": true,
                        "visibility": "Enabled"
                    },
                    {
                        "triggerProperty": "subsurfaceScattering.enableSubsurfaceScattering",
                        "triggerValue": false,
                        "visibility": "Hidden"
                    }
                ],
                "affectedProperties": [
                    "subsurfaceScattering.subsurfaceScatterFactor",
                    "subsurfaceScattering.useInfluenceMap",
                    "subsurfaceScattering.scatterColor",
                    "subsurfaceScattering.scatterDistance",
                    "subsurfaceScattering.quality"
                ]
            }
        },
        {
            "type": "UpdatePropertyVisibility",
            "args": {
                "actions": [
                    {
                        "triggerProperty": "subsurfaceScattering.enableTransmission",
                        "triggerValue": true,
                        "visibility": "Enabled"
                    },
                    {
                        "triggerProperty": "subsurfaceScattering.enableTransmission",
                        "triggerValue": false,
                        "visibility": "Hidden"
                    }
                ],
                "affectedProperties": [
                    "subsurfaceScattering.thickness",
                    "subsurfaceScattering.useThicknessMap",
                    "subsurfaceScattering.transmissionTint",
                    "subsurfaceScattering.transmissionMode",
                    "subsurfaceScattering.transmissionScale"
                ]
            }
        },
        {
            "type": "Lua",
            "args": {
                "file": "StandardPBR_HandleOpacityDoubleSided.lua"
            }
        },
        {
            "type": "OverrideDrawList",
            "args": {
                "triggerProperty": "opacity.mode",
                "triggerValue": "Blended",
                "shaderIndex": 1,
                "drawList": "transparent"
            }
        },
        {
            "type": "OverrideDrawList",
            "args": {
                "triggerProperty": "opacity.mode",
                "triggerValue": "TintedTransparent",
                "shaderIndex": 1,
                "drawList": "transparent"
            }
        },
        {
            "type": "Lua",
            "args": {
                "file": "StandardPBR_HandleOpacityMode.lua"
            }
        }
    ],
    "uvNameMap": {
        "UV0": "Base",
        "UV1": "Packed"
    }
}
