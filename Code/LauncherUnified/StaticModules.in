/*
* All or portions of this file Copyright (c) Amazon.com, Inc. or its affiliates or
* its licensors.
*
* For complete copyright and license terms please see the LICENSE at the root of this
* distribution (the "License"). All use of this software is governed by the License,
* or, if provided, by the license below or the license accompanying this file. Do not
* remove or modify any license notices. This file is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*
*/
/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
// THIS CODE IS AUTOGENERATED, DO NOT MODIFY
/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////

// This code creates AZ::Modules for use in a monolithic build.
#if AZ_MONOLITHIC_BUILD

#include <AzCore/std/containers/vector.h>

#define DECLARE_CRYREGISTER_SINGLETON_CLASS(implclassname) \
    void* Get##implclassname##Factory();

DECLARE_CRYREGISTER_SINGLETON_CLASS(CEngineModule_Cry3DEngine)
DECLARE_CRYREGISTER_SINGLETON_CLASS(CEngineModule_CryFont)
DECLARE_CRYREGISTER_SINGLETON_CLASS(CEngineModule_CryRenderer)

#undef DECLARE_CRYREGISTER_SINGLETON_CLASS

namespace AZ
{
    class Module;
}

${extern_module_declarations}

extern "C" void CreateStaticModules(AZStd::vector<AZ::Module*>& modulesOut)
{
${module_invocations}
    // Call methods to avoid symbol striping
#define NON_STRIPPING_CALL(Module) \
    AZ_UNUSED(Get##Module##Factory())

    NON_STRIPPING_CALL(CEngineModule_Cry3DEngine);
    NON_STRIPPING_CALL(CEngineModule_CryFont);
    NON_STRIPPING_CALL(CEngineModule_CryRenderer);
#undef NON_STRIPPING_CALL
}

#endif // AZ_MONOLITHIC_BUILD
